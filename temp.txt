File: /app/account/addresses/page.js

'use client'

import { useState, useRef, useMemo, useCallback, useEffect, memo } from 'react'
import { useAddresses } from '@/hooks/useAddresses'
import {
    PlusIcon,
    MapPinIcon,
    PencilIcon,
    TrashIcon,
    CheckIcon,
    ExclamationTriangleIcon
} from '@heroicons/react/24/outline'
import { validateAddress, validatezipCode } from '@/lib/validations/userValidation'
import { INDIAN_STATES, ADDRESS_TYPES } from '@/utils/addressUtils'
import LoadingSpinner from '@/components/ui/LoadingSpinner'

// Enhanced address card component with improved styling
// Enhanced address card component with improved text styling
// Simplified address card component with cleaner text styling
const AddressCard = memo(({ address, isDefault, onEdit, onDelete, onSetDefault }) => {
    const [actionLoading, setActionLoading] = useState(null)

    const handleAction = useCallback(async (action, actionFn) => {
        setActionLoading(action)
        await actionFn()
        setActionLoading(null)
    }, [])

    const addressType = useMemo(() => {
        return ADDRESS_TYPES.find(type => type.value === address.type) || ADDRESS_TYPES[0]
    }, [address.type])

    return (
        <div className={`group relative bg-white rounded-2xl shadow-sm border transition-all duration-300 hover:shadow-lg ${isDefault
                ? 'border-emerald-200 bg-gradient-to-br from-emerald-50 to-white ring-1 ring-emerald-100'
                : 'border-gray-200 hover:border-gray-300 hover:shadow-md'
            }`}>

            {/* Default Address Indicator */}
            {isDefault && (
                <div className="absolute -top-2 -right-2 z-10">
                    <div className="bg-emerald-500 text-white px-3 py-1 rounded-full text-xs font-semibold shadow-sm">
                        <CheckIcon className="h-3 w-3 inline mr-1" />
                        Default
                    </div>
                </div>
            )}

            <div className="p-6">
                {/* Header Section */}
                <div className="flex items-start justify-between mb-5">
                    <div className="flex items-center gap-3">
                        <div className={`w-12 h-12 rounded-xl flex items-center justify-center text-xl ${isDefault
                                ? 'bg-emerald-100 text-emerald-600'
                                : 'bg-gray-100 text-gray-600'
                            }`}>
                            {addressType.icon}
                        </div>
                        <div>
                            <h3 className={`font-bold text-lg leading-tight ${isDefault ? 'text-emerald-900' : 'text-gray-900'
                                }`}>
                                {address.label || addressType.label}
                            </h3>
                            <p className={`text-xs font-medium uppercase tracking-wide mt-1 ${isDefault ? 'text-emerald-600' : 'text-gray-500'
                                }`}>
                                {addressType.description}
                            </p>
                        </div>
                    </div>

                    {/* Action Buttons */}
                    <div className="flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                        <button
                            onClick={() => onEdit(address)}
                            className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors duration-200"
                            title="Edit address"
                        >
                            <PencilIcon className="h-4 w-4" />
                        </button>
                        <button
                            onClick={() => handleAction('delete', () => onDelete(address._id))}
                            disabled={actionLoading === 'delete'}
                            className="p-2 text-gray-400 hover:text-red-600 hover:bg-red-50 rounded-lg transition-colors duration-200 disabled:opacity-50"
                            title="Delete address"
                        >
                            {actionLoading === 'delete' ? (
                                <LoadingSpinner size="sm" className="border-red-500" />
                            ) : (
                                <TrashIcon className="h-4 w-4" />
                            )}
                        </button>
                    </div>
                </div>

                {/* Address Details with Simplified Typography */}
                <div className="space-y-3 mb-6">
                    <div className="flex items-start gap-3">
                        <div className={`w-8 h-8 rounded-lg flex items-center justify-center mt-0.5 flex-shrink-0 ${isDefault
                                ? 'bg-emerald-100 text-emerald-600'
                                : 'bg-gray-100 text-gray-500'
                            }`}>
                            <MapPinIcon className="h-4 w-4" />
                        </div>
                        <div className="flex-1 min-w-0">
                            {/* Street Address */}
                            <div className="mb-3">
                                <p className="text-sm font-medium text-gray-600 uppercase tracking-wide mb-1">
                                    Street Address
                                </p>
                                <p className="text-base font-semibold text-gray-900 leading-relaxed">
                                    {address.street}
                                </p>
                            </div>

                            {/* City and State */}
                            <div>
                                <p className="text-sm font-medium text-gray-600 uppercase tracking-wide mb-1">
                                    Location
                                </p>
                                <div className="flex items-center gap-2 text-gray-700">
                                    <span className="font-semibold text-gray-900">
                                        {address.city}
                                    </span>
                                    <span className="w-1 h-1 bg-gray-400 rounded-full"></span>
                                    <span className="font-medium text-gray-700">
                                        {address.state}
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Set Default Button */}
                {!isDefault && (
                    <button
                        onClick={() => handleAction('setDefault', () => onSetDefault(address._id))}
                        disabled={actionLoading === 'setDefault'}
                        className="w-full flex items-center justify-center gap-2 px-4 py-3 text-sm font-semibold text-gray-700 bg-gradient-to-r from-gray-50 to-gray-100 border border-gray-200 rounded-xl hover:from-gray-100 hover:to-gray-200 hover:border-gray-300 disabled:opacity-50 transition-all duration-200 group"
                    >
                        {actionLoading === 'setDefault' ? (
                            <>
                                <LoadingSpinner size="sm" className="border-gray-600" />
                                <span>Setting as default...</span>
                            </>
                        ) : (
                            <>
                                <CheckIcon className="h-4 w-4 group-hover:text-emerald-600 transition-colors duration-200" />
                                <span>Set as Default Address</span>
                            </>
                        )}
                    </button>
                )}
            </div>
        </div>
    )
})

AddressCard.displayName = 'AddressCard'

// Enhanced address form component
const AddressForm = memo(({ address, onSave, onCancel, loading }) => {
    const [formData, setFormData] = useState({
        type: 'home',
        label: '',
        street: '',
        city: '',
        state: '',
        zipCode: '',
        isDefault: false
    })

    const [errors, setErrors] = useState({})
    const [zipCodeValidating, setzipCodeValidating] = useState(false)

    // Form refs
    const streetRef = useRef(null)
    const cityRef = useRef(null)
    const zipCodeRef = useRef(null)

    // Initialize form data
    useEffect(() => {
        if (address) {
            setFormData({
                type: address.type || 'home',
                label: address.label || '',
                street: address.street || '',
                city: address.city || '',
                state: address.state || '',
                zipCode: address.zipCode || '',
                isDefault: address.isDefault || false
            })
        }
    }, [address])

    // Validate ZIP code on change
    const handlezipCodeChange = useCallback(async (zipCode) => {
        if (zipCode.length === 6) {
            setzipCodeValidating(true)
            const validation = validatezipCode(zipCode)

            if (!validation.isValid) {
                setErrors(prev => ({ ...prev, zipCode: validation.error }))
            } else {
                setErrors(prev => ({ ...prev, zipCode: '' }))
            }
            setzipCodeValidating(false)
        }
    }, [])

    const handleInputChange = useCallback((e) => {
        const { name, value, type, checked } = e.target

        setFormData(prev => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value
        }))

        // Clear error when user starts typing
        if (errors[name]) {
            setErrors(prev => ({ ...prev, [name]: '' }))
        }

        // Validate ZIP code
        if (name === 'zipCode') {
            handlezipCodeChange(value)
        }
    }, [errors, handlezipCodeChange])

    const handleSubmit = useCallback(async (e) => {
        e.preventDefault()

        const validation = validateAddress(formData)
        if (!validation.isValid) {
            setErrors(validation.errors)
            return
        }

        const result = await onSave(formData)
        if (result.success) {
            onCancel() // Close form
        } else {
            setErrors({ submit: result.error })
        }
    }, [formData, onSave, onCancel])

    return (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-2xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-y-auto">
                <div className="p-6">
                    <h2 className="text-xl font-bold text-gray-900 mb-6">
                        {address ? 'Edit Address' : 'Add New Address'}
                    </h2>

                    <form onSubmit={handleSubmit} className="space-y-5">
                        {/* Address Type */}
                        <div>
                            <label className="block text-sm font-semibold text-gray-700 mb-2">
                                Address Type
                            </label>
                            <select
                                name="type"
                                value={formData.type}
                                onChange={handleInputChange}
                                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-black focus:border-black transition-all duration-200"
                            >
                                {ADDRESS_TYPES.map(type => (
                                    <option key={type.value} value={type.value}>
                                        {type.icon} {type.label}
                                    </option>
                                ))}
                            </select>
                        </div>

                        {/* Label */}
                        <div>
                            <label className="block text-sm font-semibold text-gray-700 mb-2">
                                Label (Optional)
                            </label>
                            <input
                                type="text"
                                name="label"
                                value={formData.label}
                                onChange={handleInputChange}
                                placeholder="e.g., Home, Office, etc."
                                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-black focus:border-black transition-all duration-200"
                            />
                        </div>

                        {/* Street Address */}
                        <div>
                            <label className="block text-sm font-semibold text-gray-700 mb-2">
                                Street Address *
                            </label>
                            <textarea
                                ref={streetRef}
                                name="street"
                                value={formData.street}
                                onChange={handleInputChange}
                                placeholder="House/Flat No., Building Name, Street, Area"
                                required
                                rows={3}
                                className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-black focus:border-black resize-none transition-all duration-200 ${errors.street ? 'border-red-300 bg-red-50' : 'border-gray-300'
                                    }`}
                            />
                            {errors.street && (
                                <p className="mt-2 text-sm text-red-600 flex items-center gap-1">
                                    <ExclamationTriangleIcon className="h-4 w-4" />
                                    {errors.street}
                                </p>
                            )}
                        </div>

                        {/* City and State Row */}
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            {/* City */}
                            <div>
                                <label className="block text-sm font-semibold text-gray-700 mb-2">
                                    City *
                                </label>
                                <input
                                    ref={cityRef}
                                    type="text"
                                    name="city"
                                    value={formData.city}
                                    onChange={handleInputChange}
                                    placeholder="Enter city name"
                                    required
                                    className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-black focus:border-black transition-all duration-200 ${errors.city ? 'border-red-300 bg-red-50' : 'border-gray-300'
                                        }`}
                                />
                                {errors.city && (
                                    <p className="mt-2 text-sm text-red-600 flex items-center gap-1">
                                        <ExclamationTriangleIcon className="h-4 w-4" />
                                        {errors.city}
                                    </p>
                                )}
                            </div>

                            {/* State */}
                            <div>
                                <label className="block text-sm font-semibold text-gray-700 mb-2">
                                    State *
                                </label>
                                <select
                                    name="state"
                                    value={formData.state}
                                    onChange={handleInputChange}
                                    required
                                    className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-black focus:border-black transition-all duration-200 ${errors.state ? 'border-red-300 bg-red-50' : 'border-gray-300'
                                        }`}
                                >
                                    <option value="">Select State</option>
                                    {INDIAN_STATES.map(state => (
                                        <option key={state.value} value={state.value}>
                                            {state.label}
                                        </option>
                                    ))}
                                </select>
                                {errors.state && (
                                    <p className="mt-2 text-sm text-red-600 flex items-center gap-1">
                                        <ExclamationTriangleIcon className="h-4 w-4" />
                                        {errors.state}
                                    </p>
                                )}
                            </div>
                        </div>

                        {/* ZIP Code */}
                        <div>
                            <label className="block text-sm font-semibold text-gray-700 mb-2">
                                ZIP Code *
                            </label>
                            <div className="relative">
                                <input
                                    ref={zipCodeRef}
                                    type="text"
                                    name="zipCode"
                                    value={formData.zipCode}
                                    onChange={handleInputChange}
                                    placeholder="6-digit ZIP code"
                                    maxLength={6}
                                    required
                                    className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-black focus:border-black transition-all duration-200 ${errors.zipCode ? 'border-red-300 bg-red-50' : 'border-gray-300'
                                        }`}
                                />
                                {zipCodeValidating && (
                                    <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                                        <LoadingSpinner size="sm" />
                                    </div>
                                )}
                            </div>
                            {errors.zipCode && (
                                <p className="mt-2 text-sm text-red-600 flex items-center gap-1">
                                    <ExclamationTriangleIcon className="h-4 w-4" />
                                    {errors.zipCode}
                                </p>
                            )}
                        </div>

                        {/* Default Address */}
                        <div className="flex items-center gap-3 p-4 bg-gray-50 rounded-xl">
                            <input
                                type="checkbox"
                                name="isDefault"
                                checked={formData.isDefault}
                                onChange={handleInputChange}
                                className="h-4 w-4 text-black focus:ring-black border-gray-300 rounded"
                            />
                            <label className="text-sm font-medium text-gray-700">
                                Set as default address
                            </label>
                        </div>

                        {/* Submit Error */}
                        {errors.submit && (
                            <div className="bg-red-50 border border-red-200 rounded-xl p-4">
                                <div className="flex items-center gap-2">
                                    <ExclamationTriangleIcon className="h-5 w-5 text-red-600" />
                                    <p className="text-sm text-red-700 font-medium">{errors.submit}</p>
                                </div>
                            </div>
                        )}

                        {/* Buttons */}
                        <div className="flex gap-3 pt-4">
                            <button
                                type="button"
                                onClick={onCancel}
                                className="flex-1 px-6 py-3 text-sm font-semibold text-gray-700 bg-gray-100 rounded-xl hover:bg-gray-200 transition-colors duration-200"
                            >
                                Cancel
                            </button>
                            <button
                                type="submit"
                                disabled={loading}
                                className="flex-1 px-6 py-3 text-sm font-semibold text-white bg-black rounded-xl hover:bg-gray-800 disabled:opacity-50 transition-colors duration-200 flex items-center justify-center gap-2"
                            >
                                {loading ? (
                                    <>
                                        <LoadingSpinner size="sm" className="border-white" />
                                        Saving...
                                    </>
                                ) : (
                                    'Save Address'
                                )}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    )
})

AddressForm.displayName = 'AddressForm'

export default function AddressesPage() {
    const { addresses, defaultAddress, loading, error, addAddress, updateAddress, deleteAddress, setDefaultAddress } = useAddresses()

    const [showForm, setShowForm] = useState(false)
    const [editingAddress, setEditingAddress] = useState(null)
    const [formLoading, setFormLoading] = useState(false)
    const [actionMessage, setActionMessage] = useState(null)

    // Handle add address
    const handleAddAddress = useCallback(() => {
        setEditingAddress(null)
        setShowForm(true)
    }, [])

    // Handle edit address
    const handleEditAddress = useCallback((address) => {
        setEditingAddress(address)
        setShowForm(true)
    }, [])

    // Handle save address
    const handleSaveAddress = useCallback(async (addressData) => {
        setFormLoading(true)

        try {
            let result
            if (editingAddress) {
                result = await updateAddress(editingAddress._id, addressData)
            } else {
                result = await addAddress(addressData)
            }

            if (result.success) {
                setActionMessage({
                    type: 'success',
                    text: editingAddress ? 'Address updated successfully' : 'Address added successfully'
                })
                setShowForm(false)
                setEditingAddress(null)
            }

            return result
        } catch (error) {
            return { success: false, error: error.message }
        } finally {
            setFormLoading(false)
        }
    }, [editingAddress, addAddress, updateAddress])

    // Handle delete address
    const handleDeleteAddress = useCallback(async (addressId) => {
        if (window.confirm('Are you sure you want to delete this address?')) {
            const result = await deleteAddress(addressId)
            if (result.success) {
                setActionMessage({ type: 'success', text: 'Address deleted successfully' })
            } else {
                setActionMessage({ type: 'error', text: result.error })
            }
        }
    }, [deleteAddress])

    // Handle set default address
    const handleSetDefaultAddress = useCallback(async (addressId) => {
        const result = await setDefaultAddress(addressId)
        if (result.success) {
            setActionMessage({ type: 'success', text: 'Default address updated' })
        } else {
            setActionMessage({ type: 'error', text: result.error })
        }
    }, [setDefaultAddress])

    // Clear action messages
    useEffect(() => {
        if (actionMessage) {
            const timer = setTimeout(() => setActionMessage(null), 5000)
            return () => clearTimeout(timer)
        }
    }, [actionMessage])

    return (
        <div className="h-full w-full">
            {/* Header */}
            <div className="p-6 border-b border-gray-200 bg-white">
                <div className="flex items-center justify-between">
                    <div>
                        <h1 className="text-2xl font-bold text-gray-900">Manage Addresses</h1>
                        <p className="text-gray-600 mt-1">
                            Add and manage your delivery addresses
                        </p>
                    </div>
                    <button
                        onClick={handleAddAddress}
                        className="flex items-center gap-2 px-6 py-3 bg-black text-white rounded-xl hover:bg-gray-800 transition-colors duration-200 shadow-sm"
                    >
                        <PlusIcon className="h-4 w-4" />
                        Add Address
                    </button>
                </div>
            </div>

            {/* Action Message */}
            {actionMessage && (
                <div className={`m-6 p-4 rounded-xl border ${actionMessage.type === 'success'
                    ? 'bg-emerald-50 border-emerald-200'
                    : 'bg-red-50 border-red-200'
                    }`}>
                    <p className={`text-sm font-medium ${actionMessage.type === 'success' ? 'text-emerald-700' : 'text-red-700'
                        }`}>
                        {actionMessage.text}
                    </p>
                </div>
            )}

            {/* Content */}
            <div className="p-6">
                {loading ? (
                    <div className="flex items-center justify-center py-16">
                        <LoadingSpinner size="lg" />
                    </div>
                ) : error ? (
                    <div className="text-center py-16">
                        <ExclamationTriangleIcon className="h-12 w-12 text-red-500 mx-auto mb-4" />
                        <p className="text-red-600 font-semibold">Error loading addresses</p>
                        <p className="text-gray-500 text-sm mt-2">{error}</p>
                    </div>
                ) : addresses.length === 0 ? (
                    <div className="text-center py-16">
                        <div className="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
                            <MapPinIcon className="h-10 w-10 text-gray-400" />
                        </div>
                        <h3 className="text-xl font-semibold text-gray-900 mb-2">No addresses saved</h3>
                        <p className="text-gray-500 mb-8 max-w-md mx-auto">
                            Add your first address to get started with deliveries
                        </p>
                        <button
                            onClick={handleAddAddress}
                            className="inline-flex items-center gap-2 px-6 py-3 bg-black text-white rounded-xl hover:bg-gray-800 transition-colors duration-200"
                        >
                            <PlusIcon className="h-4 w-4" />
                            Add Your First Address
                        </button>
                    </div>
                ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {addresses.map((address) => (
                            <AddressCard
                                key={address._id}
                                address={address}
                                isDefault={defaultAddress?._id === address._id}
                                onEdit={handleEditAddress}
                                onDelete={handleDeleteAddress}
                                onSetDefault={handleSetDefaultAddress}
                            />
                        ))}
                    </div>
                )}
            </div>

            {/* Address Form Modal */}
            {showForm && (
                <AddressForm
                    address={editingAddress}
                    onSave={handleSaveAddress}
                    onCancel={() => {
                        setShowForm(false)
                        setEditingAddress(null)
                    }}
                    loading={formLoading}
                />
            )}
        </div>
    )
}





















File: /app/account/become-retailer/page.js

'use client'

import { useState, useEffect, memo } from 'react'
import { useRouter } from 'next/navigation'
import { useUser } from '@/hooks/useUser'
import {
    BuildingStorefrontIcon,
    DocumentArrowUpIcon,
    CheckCircleIcon,
    XCircleIcon,
    ClockIcon,
    InformationCircleIcon,
    ExclamationTriangleIcon
} from '@heroicons/react/24/outline'
import LoadingSpinner from '@/components/ui/LoadingSpinner'

const BUSINESS_CATEGORIES = [
    'Electronics',
    'Clothing',
    'Home & Garden',
    'Books',
    'Sports',
    'Beauty',
    'Food',
    'Other'
]

const ApplicationStatus = memo(({ status, applicationData }) => {
    if (!applicationData) return null

    const statusConfig = {
        pending: {
            icon: ClockIcon,
            color: 'text-yellow-600',
            bg: 'bg-yellow-50',
            border: 'border-yellow-200',
            title: 'Application Under Review',
            message: 'Your retailer application is being reviewed by our team. We\'ll notify you once it\'s processed.'
        },
        approved: {
            icon: CheckCircleIcon,
            color: 'text-green-600',
            bg: 'bg-green-50',
            border: 'border-green-200',
            title: 'Application Approved!',
            message: 'Congratulations! Your retailer application has been approved. You can now start selling on our platform.'
        },
        rejected: {
            icon: XCircleIcon,
            color: 'text-red-600',
            bg: 'bg-red-50',
            border: 'border-red-200',
            title: 'Application Rejected',
            message: applicationData.rejectionReason || 'Your application was not approved. Please contact support for more information.'
        }
    }

    const config = statusConfig[status]
    const StatusIcon = config.icon

    return (
        <div className={`p-4 rounded-xl border ${config.bg} ${config.border}`}>
            <div className="flex items-start gap-3">
                <StatusIcon className={`h-5 w-5 ${config.color} mt-0.5 flex-shrink-0`} />
                <div className="flex-1">
                    <h3 className={`text-sm font-medium ${config.color} mb-1`}>
                        {config.title}
                    </h3>
                    <p className="text-sm text-gray-700 mb-3">
                        {config.message}
                    </p>
                    <div className="text-xs text-gray-600 space-y-1">
                        <p><span className="font-medium">Applied:</span> {new Date(applicationData.createdAt).toLocaleDateString()}</p>
                        <p><span className="font-medium">Business:</span> {applicationData.businessName}</p>
                        <p><span className="font-medium">Category:</span> {applicationData.businessCategory}</p>
                        {applicationData.reviewedAt && (
                            <p><span className="font-medium">Reviewed:</span> {new Date(applicationData.reviewedAt).toLocaleDateString()}</p>
                        )}
                    </div>
                </div>
            </div>
        </div>
    )
})
ApplicationStatus.displayName = 'ApplicationStatus'

const SuccessMessage = memo(({ show, message, onClose }) => {
    useEffect(() => {
        if (show) {
            const timer = setTimeout(onClose, 5000)
            return () => clearTimeout(timer)
        }
    }, [show, onClose])

    if (!show) return null

    return (
        <div className="bg-emerald-50 border border-emerald-200 rounded-xl p-4">
            <div className="flex items-center gap-2">
                <CheckCircleIcon className="h-5 w-5 text-emerald-600" />
                <p className="text-emerald-700 font-medium">{message}</p>
            </div>
        </div>
    )
})
SuccessMessage.displayName = 'SuccessMessage'

export default function BecomeRetailerPage() {
    const { user, loading } = useUser()
    const router = useRouter()
    
    const [formData, setFormData] = useState({
        businessName: '',
        businessDescription: '',
        businessCategory: ''
    })
    const [errors, setErrors] = useState({})
    const [isSubmitting, setIsSubmitting] = useState(false)
    const [applicationData, setApplicationData] = useState(null)
    const [loadingApplication, setLoadingApplication] = useState(true)
    const [success, setSuccess] = useState({ show: false, message: '' })

    // Check existing application on mount
    useEffect(() => {
        const checkExistingApplication = async () => {
            if (!user) return
            
            try {
                const response = await fetch('/api/retailer/application-status')
                if (response.ok) {
                    const data = await response.json()
                    if (data.application) {
                        setApplicationData(data.application)
                    }
                }
            } catch (error) {
                console.error('Error checking application status:', error)
            } finally {
                setLoadingApplication(false)
            }
        }

        checkExistingApplication()
    }, [user])

    // Redirect if already a retailer
    useEffect(() => {
        if (user && user.role === 'Retailer') {
            router.push('/retailer/dashboard')
        }
    }, [user, router])

    const validateForm = () => {
        const newErrors = {}

        if (!formData.businessName.trim()) {
            newErrors.businessName = 'Business name is required'
        } else if (formData.businessName.trim().length < 2) {
            newErrors.businessName = 'Business name must be at least 2 characters'
        }

        if (!formData.businessDescription.trim()) {
            newErrors.businessDescription = 'Business description is required'
        } else if (formData.businessDescription.trim().length < 20) {
            newErrors.businessDescription = 'Business description must be at least 20 characters'
        }

        if (!formData.businessCategory) {
            newErrors.businessCategory = 'Please select a business category'
        }

        setErrors(newErrors)
        return Object.keys(newErrors).length === 0
    }

    const handleInputChange = (e) => {
        const { name, value } = e.target
        setFormData(prev => ({
            ...prev,
            [name]: value
        }))
        
        // Clear error when user starts typing
        if (errors[name]) {
            setErrors(prev => ({
                ...prev,
                [name]: ''
            }))
        }
    }

    const handleSubmit = async (e) => {
        e.preventDefault()

        if (!validateForm()) return

        setIsSubmitting(true)
        setErrors({})

        try {
            const response = await fetch('/api/retailer/apply', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData)
            })

            const data = await response.json()

            if (response.ok) {
                setApplicationData(data.application)
                setFormData({ businessName: '', businessDescription: '', businessCategory: '' })
                setSuccess({ show: true, message: 'Retailer application submitted successfully!' })
            } else {
                setErrors({ submit: data.error || 'Failed to submit application' })
            }
        } catch (error) {
            setErrors({ submit: 'An unexpected error occurred. Please try again.' })
        } finally {
            setIsSubmitting(false)
        }
    }

    if (loading || loadingApplication) {
        return (
            <div className="h-full flex items-center justify-center">
                <LoadingSpinner size="lg" />
            </div>
        )
    }

    if (!user) {
        router.push('/login')
        return null
    }

    return (
        <div className="h-full w-full">
            {/* Header */}
            <div className="p-6 rounded-xl border-b border-gray-200 bg-white">
                <div className="flex items-center gap-3">
                    <BuildingStorefrontIcon className="h-8 w-8 text-gray-600" />
                    <div>
                        <h1 className="text-2xl font-bold text-gray-900">Become a Retailer</h1>
                        <p className="text-gray-600 mt-1">Start selling your products on our platform</p>
                    </div>
                </div>
            </div>

            {/* Content */}
            <div className="p-6 space-y-8">
                <SuccessMessage
                    show={success.show}
                    message={success.message}
                    onClose={() => setSuccess({ show: false, message: '' })}
                />

                {/* Show application status if exists */}
                {applicationData && (
                    <ApplicationStatus 
                        status={applicationData.status} 
                        applicationData={applicationData} 
                    />
                )}

                {/* Retailer Benefits */}
                <div className="bg-blue-50 rounded-xl p-6">
                    <div className="flex items-center gap-2 mb-4">
                        <InformationCircleIcon className="h-5 w-5 text-blue-600" />
                        <h2 className="text-lg font-semibold text-blue-900">What you'll get as a retailer</h2>
                    </div>
                    <ul className="list-disc list-inside space-y-1 text-sm text-blue-800">
                        <li>Create and manage your own store</li>
                        <li>Add unlimited products with detailed descriptions</li>
                        <li>Track sales and analytics in real-time</li>
                        <li>Manage customer orders and communications</li>
                        <li>Access to our seller support team</li>
                    </ul>
                </div>

                {/* Application Form - Only show if no pending/approved application */}
                {(!applicationData || applicationData.status === 'rejected') && (
                    <div className="bg-gray-50 rounded-xl p-6">
                        <div className="flex items-center gap-2 mb-6">
                            <DocumentArrowUpIcon className="h-5 w-5 text-gray-600" />
                            <h2 className="text-lg font-semibold text-gray-900">Retailer Application</h2>
                        </div>
                        
                        <form onSubmit={handleSubmit} className="space-y-6">
                            {/* Business Name */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Business Name *
                                </label>
                                <input
                                    type="text"
                                    name="businessName"
                                    value={formData.businessName}
                                    onChange={handleInputChange}
                                    className={`w-full px-4 py-3 text-sm border-2 rounded-xl bg-white text-black placeholder:text-gray-500 focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200 ${
                                        errors.businessName ? 'border-red-300' : 'border-gray-300'
                                    }`}
                                    placeholder="Enter your business name"
                                    maxLength={100}
                                />
                                {errors.businessName && (
                                    <p className="mt-1 text-sm text-red-600">{errors.businessName}</p>
                                )}
                            </div>

                            {/* Business Category */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Business Category *
                                </label>
                                <select
                                    name="businessCategory"
                                    value={formData.businessCategory}
                                    onChange={handleInputChange}
                                    className={`w-full px-4 py-3 text-sm border-2 rounded-xl bg-white text-black focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200 ${
                                        errors.businessCategory ? 'border-red-300' : 'border-gray-300'
                                    }`}
                                >
                                    <option value="">Select a category</option>
                                    {BUSINESS_CATEGORIES.map(category => (
                                        <option key={category} value={category}>
                                            {category}
                                        </option>
                                    ))}
                                </select>
                                {errors.businessCategory && (
                                    <p className="mt-1 text-sm text-red-600">{errors.businessCategory}</p>
                                )}
                            </div>

                            {/* Business Description */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Business Description *
                                </label>
                                <textarea
                                    name="businessDescription"
                                    value={formData.businessDescription}
                                    onChange={handleInputChange}
                                    rows={4}
                                    className={`w-full px-4 py-3 text-sm border-2 rounded-xl bg-white text-black placeholder:text-gray-500 focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200 resize-none ${
                                        errors.businessDescription ? 'border-red-300' : 'border-gray-300'
                                    }`}
                                    placeholder="Describe your business, products, and what makes you unique..."
                                    maxLength={500}
                                />
                                <div className="text-xs text-gray-500 mt-1">
                                    {formData.businessDescription.length}/500 characters
                                </div>
                                {errors.businessDescription && (
                                    <p className="mt-1 text-sm text-red-600">{errors.businessDescription}</p>
                                )}
                            </div>

                            {/* Terms and Conditions */}
                            <div className="bg-white rounded-xl p-4 border border-gray-200">
                                <h3 className="text-sm font-medium text-gray-900 mb-2">Terms and Conditions</h3>
                                <div className="text-xs text-gray-600 space-y-1">
                                    <p>• I agree to comply with all platform policies and guidelines</p>
                                    <p>• I understand that product listings will be subject to review</p>
                                    <p>• I agree to provide accurate business information</p>
                                    <p>• I accept the retailer commission structure</p>
                                </div>
                            </div>

                            {/* Submit Error */}
                            {errors.submit && (
                                <div className="bg-red-50 border border-red-200 rounded-xl p-3">
                                    <div className="flex items-center gap-2">
                                        <ExclamationTriangleIcon className="h-4 w-4 text-red-600" />
                                        <p className="text-red-700 text-sm">{errors.submit}</p>
                                    </div>
                                </div>
                            )}

                            {/* Submit Button */}
                            <button
                                type="submit"
                                disabled={isSubmitting}
                                className="w-full flex justify-center items-center py-3 px-6 bg-black text-white rounded-xl hover:bg-gray-800 disabled:opacity-50 transition-colors duration-200 gap-2"
                            >
                                {isSubmitting ? (
                                    <>
                                        <LoadingSpinner size="sm" className="border-white" />
                                        Submitting Application...
                                    </>
                                ) : (
                                    <>
                                        <DocumentArrowUpIcon className="h-4 w-4" />
                                        Submit Retailer Application
                                    </>
                                )}
                            </button>
                        </form>
                    </div>
                )}

                {/* Help Section */}
                <div className="bg-gray-50 rounded-xl p-6">
                    <div className="flex items-center gap-2 mb-4">
                        <InformationCircleIcon className="h-5 w-5 text-gray-600" />
                        <h2 className="text-lg font-semibold text-gray-900">Need Help?</h2>
                    </div>
                    <div className="grid md:grid-cols-2 gap-6 text-sm">
                        <div>
                            <h4 className="font-medium text-gray-900 mb-2">Application Process</h4>
                            <ul className="text-gray-600 space-y-1">
                                <li>• Applications are reviewed within 2-3 business days</li>
                                <li>• You'll receive an email notification of the decision</li>
                                <li>• Approved retailers can immediately start listing products</li>
                            </ul>
                        </div>
                        <div>
                            <h4 className="font-medium text-gray-900 mb-2">Requirements</h4>
                            <ul className="text-gray-600 space-y-1">
                                <li>• Valid business information</li>
                                <li>• Compliance with platform policies</li>
                                <li>• Quality product standards</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}





















File: /app/account/layout.js

'use client'

import { useUser } from '@/hooks/useUser'
import { useRouter } from 'next/navigation'
import { useEffect, useMemo } from 'react'
import AccountSidebar from '@/components/account/AccountSidebar'
import LoadingSpinner from '@/components/ui/LoadingSpinner'

export default function AccountLayout({ children }) {
    const { user, loading } = useUser()
    const router = useRouter()

    // Memoize redirect logic to prevent unnecessary recalculations
    const shouldRedirect = useMemo(() => {
        return !loading && !user
    }, [loading, user])

    useEffect(() => {
        if (shouldRedirect) {
            router.push('/login')
        }
    }, [shouldRedirect, router])

    // Show loading while checking authentication
    if (loading) {
        return (
            <div className="min-h-screen flex items-center justify-center bg-gray-50 w-full">
                <LoadingSpinner />
            </div>
        )
    }

    // Redirect if not authenticated
    if (!user) {
        return null
    }

    return (
        <div className="min-h-screen bg-gray-50 w-full">
            <div className="px-4 sm:px-6 lg:px-12 py-8 w-full">
                <div className="grid grid-cols-1 lg:grid-cols-4 gap-8 w-full">
                    {/* Sidebar - Desktop only, Mobile handled by AccountSidebar component */}
                    <div className="lg:col-span-1">
                        <AccountSidebar user={user} />
                    </div>

                    {/* Main Content */}
                    <div className="lg:col-span-3">
                        <div className="bg-white rounded-xl shadow-sm border border-gray-200 min-h-[600px] w-full">
                            {children}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}





















File: /app/account/orders/page.js

'use client'

import { useState, useRef, useMemo, useCallback, useEffect, memo } from 'react'
import { useOrders } from '@/hooks/useOrders'
import {
    MagnifyingGlassIcon,
    FunnelIcon,
    EyeIcon,
    ArrowPathIcon,
    XMarkIcon,
    ChevronDownIcon,
    TruckIcon,
    CheckCircleIcon,
    ClockIcon,
    ExclamationTriangleIcon
} from '@heroicons/react/24/outline'
import Link from 'next/link'
import LoadingSpinner from '@/components/ui/LoadingSpinner'

// Memoized order status component
const OrderStatus = memo(({ status }) => {
    const statusConfig = useMemo(() => ({
        pending: { color: 'bg-yellow-100 text-yellow-800', icon: ClockIcon, label: 'Pending' },
        confirmed: { color: 'bg-blue-100 text-blue-800', icon: CheckCircleIcon, label: 'Confirmed' },
        processing: { color: 'bg-purple-100 text-purple-800', icon: ArrowPathIcon, label: 'Processing' },
        shipped: { color: 'bg-indigo-100 text-indigo-800', icon: TruckIcon, label: 'Shipped' },
        delivered: { color: 'bg-green-100 text-green-800', icon: CheckCircleIcon, label: 'Delivered' },
        cancelled: { color: 'bg-red-100 text-red-800', icon: XMarkIcon, label: 'Cancelled' },
        returned: { color: 'bg-gray-100 text-gray-800', icon: ArrowPathIcon, label: 'Returned' }
    }), [])

    const config = statusConfig[status] || statusConfig.pending
    const Icon = config.icon

    return (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config.color}`}>
            <Icon className="h-3 w-3 mr-1" />
            {config.label}
        </span>
    )
})

OrderStatus.displayName = 'OrderStatus'

// Memoized order card component
const OrderCard = memo(({ order, onViewDetails, onCancel, onReorder }) => {
    const [isExpanded, setIsExpanded] = useState(false)
    const [actionLoading, setActionLoading] = useState(null)

    const canCancel = useMemo(() => {
        return ['pending', 'confirmed'].includes(order.status)
    }, [order.status])

    const formatDate = useCallback((date) => {
        return new Date(date).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        })
    }, [])

    const handleAction = useCallback(async (action, actionFn) => {
        setActionLoading(action)
        await actionFn()
        setActionLoading(null)
    }, [])

    return (
        <div className="bg-white rounded-xl border border-gray-200 p-6 hover:shadow-md transition-shadow duration-200">
            {/* Order Header */}
            <div className="flex items-start justify-between mb-4">
                <div className="flex-1">
                    <div className="flex items-center gap-3 mb-2">
                        <h3 className="text-lg font-semibold text-gray-900">
                            Order #{order.orderNumber}
                        </h3>
                        <OrderStatus status={order.status} />
                    </div>
                    <div className="flex items-center gap-4 text-sm text-gray-600">
                        <span>Placed on {formatDate(order.timestamps.orderDate)}</span>
                        <span>•</span>
                        <span className="font-medium text-gray-900">${order.totals.total.toFixed(2)}</span>
                        <span>•</span>
                        <span>{order.items.length} item{order.items.length !== 1 ? 's' : ''}</span>
                    </div>
                </div>

                <button
                    onClick={() => setIsExpanded(!isExpanded)}
                    className="p-2 text-gray-500 hover:text-gray-700 rounded-lg hover:bg-gray-100 transition-colors duration-200"
                >
                    <ChevronDownIcon className={`h-5 w-5 transform transition-transform duration-200 ${isExpanded ? 'rotate-180' : ''}`} />
                </button>
            </div>

            {/* Order Items Preview */}
            <div className="mb-4">
                <div className="flex items-center gap-3 overflow-x-auto pb-2">
                    {order.items.slice(0, 3).map((item, index) => (
                        <div key={index} className="flex items-center gap-2 bg-gray-50 rounded-lg p-2 whitespace-nowrap">
                            {item.image && (
                                <img
                                    src={item.image}
                                    alt={item.name}
                                    className="w-8 h-8 object-cover rounded"
                                />
                            )}
                            <div className="text-sm">
                                <p className="font-medium text-gray-900 max-w-32 truncate">{item.name}</p>
                                <p className="text-gray-600">Qty: {item.quantity}</p>
                            </div>
                        </div>
                    ))}
                    {order.items.length > 3 && (
                        <div className="text-sm text-gray-500 px-2">
                            +{order.items.length - 3} more
                        </div>
                    )}
                </div>
            </div>

            {/* Expanded Content */}
            {isExpanded && (
                <div className="border-t border-gray-200 pt-4 space-y-4">
                    {/* Shipping Info */}
                    <div className="bg-gray-50 rounded-lg p-4">
                        <h4 className="font-medium text-gray-900 mb-2">Shipping Address</h4>
                        <div className="text-sm text-gray-600">
                            <p>{order.shippingAddress.street}</p>
                            <p>{order.shippingAddress.city}, {order.shippingAddress.state} {order.shippingAddress.zipCode}</p>
                        </div>
                    </div>

                    {/* Tracking Info */}
                    {order.tracking?.number && (
                        <div className="bg-blue-50 rounded-lg p-4">
                            <h4 className="font-medium text-gray-900 mb-2">Tracking Information</h4>
                            <div className="text-sm text-gray-600">
                                <p>Carrier: {order.tracking.carrier}</p>
                                <p>Tracking: {order.tracking.number}</p>
                                {order.tracking.estimatedDelivery && (
                                    <p>Estimated Delivery: {formatDate(order.tracking.estimatedDelivery)}</p>
                                )}
                            </div>
                        </div>
                    )}
                </div>
            )}

            {/* Action Buttons */}
            <div className="flex items-center gap-3 mt-4 pt-4 border-t border-gray-200">
                <Link
                    href={`/orders/${order._id}`}
                    className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors duration-200"
                >
                    <EyeIcon className="h-4 w-4" />
                    View Details
                </Link>

                <button
                    onClick={() => handleAction('reorder', () => onReorder(order._id))}
                    disabled={actionLoading === 'reorder'}
                    className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-white bg-black rounded-lg hover:bg-gray-800 disabled:opacity-50 transition-colors duration-200"
                >
                    {actionLoading === 'reorder' ? (
                        <LoadingSpinner size="sm" className="border-white" />
                    ) : (
                        <ArrowPathIcon className="h-4 w-4" />
                    )}
                    Reorder
                </button>

                {canCancel && (
                    <button
                        onClick={() => handleAction('cancel', () => onCancel(order._id))}
                        disabled={actionLoading === 'cancel'}
                        className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-red-700 bg-white border border-red-300 rounded-lg hover:bg-red-50 disabled:opacity-50 transition-colors duration-200"
                    >
                        {actionLoading === 'cancel' ? (
                            <LoadingSpinner size="sm" className="border-red-600" />
                        ) : (
                            <XMarkIcon className="h-4 w-4" />
                        )}
                        Cancel Order
                    </button>
                )}
            </div>
        </div>
    )
})

OrderCard.displayName = 'OrderCard'

// Memoized filter component
const OrderFilters = memo(({ onFilterChange, currentFilters }) => {
    const [isOpen, setIsOpen] = useState(false)
    const filterRef = useRef(null)

    const statusOptions = useMemo(() => [
        { value: '', label: 'All Orders' },
        { value: 'pending', label: 'Pending' },
        { value: 'confirmed', label: 'Confirmed' },
        { value: 'processing', label: 'Processing' },
        { value: 'shipped', label: 'Shipped' },
        { value: 'delivered', label: 'Delivered' },
        { value: 'cancelled', label: 'Cancelled' }
    ], [])

    const dateRangeOptions = useMemo(() => [
        { value: '', label: 'All Time' },
        { value: '30', label: 'Last 30 Days' },
        { value: '90', label: 'Last 3 Months' },
        { value: '365', label: 'Last Year' }
    ], [])

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (filterRef.current && !filterRef.current.contains(event.target)) {
                setIsOpen(false)
            }
        }

        document.addEventListener('mousedown', handleClickOutside)
        return () => document.removeEventListener('mousedown', handleClickOutside)
    }, [])

    return (
        <div className="relative" ref={filterRef}>
            <button
                onClick={() => setIsOpen(!isOpen)}
                className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors duration-200"
            >
                <FunnelIcon className="h-4 w-4" />
                Filters
                <ChevronDownIcon className={`h-4 w-4 transform transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`} />
            </button>

            {isOpen && (
                <div className="absolute right-0 mt-2 w-56 bg-white rounded-xl shadow-lg border border-gray-200 z-20">
                    <div className="p-4 space-y-4">
                        {/* Status Filter */}
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">Status</label>
                            <select
                                value={currentFilters.status || ''}
                                onChange={(e) => onFilterChange({ ...currentFilters, status: e.target.value })}
                                className="w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-black"
                            >
                                {statusOptions.map(option => (
                                    <option key={option.value} value={option.value}>
                                        {option.label}
                                    </option>
                                ))}
                            </select>
                        </div>

                        {/* Date Range Filter */}
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">Date Range</label>
                            <select
                                value={currentFilters.dateRange || ''}
                                onChange={(e) => onFilterChange({ ...currentFilters, dateRange: e.target.value })}
                                className="w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-black"
                            >
                                {dateRangeOptions.map(option => (
                                    <option key={option.value} value={option.value}>
                                        {option.label}
                                    </option>
                                ))}
                            </select>
                        </div>

                        {/* Clear Filters */}
                        <button
                            onClick={() => onFilterChange({})}
                            className="w-full px-3 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors duration-200"
                        >
                            Clear All Filters
                        </button>
                    </div>
                </div>
            )}
        </div>
    )
})

OrderFilters.displayName = 'OrderFilters'

// Main Orders Page Component
export default function OrdersPage() {
    const { orders, loading, error, fetchOrders, cancelOrder, reorderItems } = useOrders()
    const [searchTerm, setSearchTerm] = useState('')
    const [filters, setFilters] = useState({})
    const [showCancelDialog, setShowCancelDialog] = useState(null)

    const searchRef = useRef(null)

    // Initialize data on component mount
    useEffect(() => {
        fetchOrders()
    }, [fetchOrders])

    // Handle search with debouncing
    useEffect(() => {
        const timeoutId = setTimeout(() => {
            fetchOrders({ ...filters, search: searchTerm })
        }, 300)

        return () => clearTimeout(timeoutId)
    }, [searchTerm, filters, fetchOrders])

    // Memoized filtered orders for client-side filtering
    const filteredOrders = useMemo(() => {
        if (!orders) return []

        return orders.filter(order => {
            const matchesSearch = !searchTerm ||
                order.orderNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
                order.items.some(item =>
                    item.name.toLowerCase().includes(searchTerm.toLowerCase())
                )

            return matchesSearch
        })
    }, [orders, searchTerm])

    // Handle filter changes
    const handleFilterChange = useCallback((newFilters) => {
        setFilters(newFilters)
    }, [])

    // Handle order cancellation
    const handleCancelOrder = useCallback(async (orderId) => {
        const result = await cancelOrder(orderId)
        if (result.success) {
            setShowCancelDialog(null)
            // Show success message (you can add toast notification here)
        } else {
            alert(`Failed to cancel order: ${result.error}`)
        }
    }, [cancelOrder])

    // Handle reorder
    const handleReorder = useCallback(async (orderId) => {
        const result = await reorderItems(orderId)
        if (result.success) {
            // Redirect to cart or show success message
            alert('Items added to cart successfully!')
        } else {
            alert(`Failed to reorder: ${result.error}`)
        }
    }, [reorderItems])

    if (loading && !orders.length) {
        return (
            <div className="h-full flex items-center justify-center">
                <LoadingSpinner size="lg" />
            </div>
        )
    }

    return (
        <div className="h-full w-full">
            {/* Header */}
            <div className="p-6 border-b border-gray-200">
                <h1 className="text-2xl font-bold text-gray-900">Order History</h1>
                <p className="text-gray-600 mt-2">
                    Track and manage your orders
                </p>
            </div>

            {/* Search and Filters */}
            <div className="p-6 border-b border-gray-200">
                <div className="flex flex-col sm:flex-row gap-4">
                    {/* Search Bar */}
                    <div className="flex-1 relative">
                        <input
                            ref={searchRef}
                            type="text"
                            placeholder="Search orders by number or item name..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            className="w-full pl-10 pr-4 py-2 text-sm border-2 border-gray-300 rounded-xl bg-white text-black placeholder:text-gray-500 focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200"
                        />
                        <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                    </div>

                    {/* Filters */}
                    <OrderFilters
                        onFilterChange={handleFilterChange}
                        currentFilters={filters}
                    />
                </div>
            </div>

            {/* Orders List */}
            <div className="p-6">
                {error && (
                    <div className="mb-6 bg-red-50 border border-red-200 rounded-xl p-4">
                        <div className="flex items-center gap-2">
                            <ExclamationTriangleIcon className="h-5 w-5 text-red-600" />
                            <p className="text-red-700">{error}</p>
                        </div>
                    </div>
                )}

                {filteredOrders.length === 0 ? (
                    <div className="text-center py-12">
                        <div className="max-w-md mx-auto">
                            <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                                <TruckIcon className="h-8 w-8 text-gray-400" />
                            </div>
                            <h3 className="text-lg font-medium text-gray-900 mb-2">No orders found</h3>
                            <p className="text-gray-500 mb-6">
                                {searchTerm || Object.keys(filters).length > 0
                                    ? "No orders match your search criteria"
                                    : "You haven't placed any orders yet"
                                }
                            </p>
                            <Link
                                href="/"
                                className="inline-flex items-center px-4 py-2 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors duration-200"
                            >
                                Start Shopping
                            </Link>
                        </div>
                    </div>
                ) : (
                    <div className="space-y-4">
                        {filteredOrders.map((order) => (
                            <OrderCard
                                key={order._id}
                                order={order}
                                onCancel={handleCancelOrder}
                                onReorder={handleReorder}
                            />
                        ))}
                    </div>
                )}

                {/* Loading indicator for pagination */}
                {loading && orders.length > 0 && (
                    <div className="flex justify-center py-8">
                        <LoadingSpinner size="md" />
                    </div>
                )}
            </div>

            {/* Cancel Confirmation Dialog */}
            {showCancelDialog && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white rounded-xl p-6 max-w-md w-full mx-4">
                        <h3 className="text-lg font-semibold text-gray-900 mb-4">Cancel Order</h3>
                        <p className="text-gray-600 mb-6">
                            Are you sure you want to cancel this order? This action cannot be undone.
                        </p>
                        <div className="flex gap-3">
                            <button
                                onClick={() => setShowCancelDialog(null)}
                                className="flex-1 px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors duration-200"
                            >
                                Keep Order
                            </button>
                            <button
                                onClick={() => handleCancelOrder(showCancelDialog)}
                                className="flex-1 px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-lg hover:bg-red-700 transition-colors duration-200"
                            >
                                Cancel Order
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    )
}





















File: /app/account/orders/[id]/page.js

'use client'

import { useState, useRef, useMemo, useCallback, useEffect, memo } from 'react'
import { useParams, useRouter } from 'next/navigation'
import Link from 'next/link'
import {
    ArrowLeftIcon,
    TruckIcon,
    CheckCircleIcon,
    ClockIcon,
    XMarkIcon,
    ArrowPathIcon,
    PrinterIcon,
    ChatBubbleLeftIcon,
    MapPinIcon,
    CreditCardIcon,
    ExclamationTriangleIcon
} from '@heroicons/react/24/outline'
import LoadingSpinner from '@/components/ui/LoadingSpinner'

// Memoized order status timeline component
const OrderTimeline = memo(({ order }) => {
    const timelineSteps = useMemo(() => {
        const steps = [
            {
                key: 'orderDate',
                label: 'Order Placed',
                status: 'completed',
                date: order.timestamps.orderDate,
                icon: CheckCircleIcon
            },
            {
                key: 'confirmedAt',
                label: 'Order Confirmed',
                status: order.timestamps.confirmedAt ? 'completed' : 'pending',
                date: order.timestamps.confirmedAt,
                icon: CheckCircleIcon
            },
            {
                key: 'processing',
                label: 'Processing',
                status: ['processing', 'shipped', 'delivered'].includes(order.status) ? 'completed' : 'pending',
                date: order.timestamps.processingAt,
                icon: ArrowPathIcon
            },
            {
                key: 'shippedAt',
                label: 'Shipped',
                status: order.timestamps.shippedAt ? 'completed' : 'pending',
                date: order.timestamps.shippedAt,
                icon: TruckIcon
            },
            {
                key: 'deliveredAt',
                label: 'Delivered',
                status: order.timestamps.deliveredAt ? 'completed' : 'pending',
                date: order.timestamps.deliveredAt,
                icon: CheckCircleIcon
            }
        ]

        // Handle cancelled orders
        if (order.status === 'cancelled') {
            return steps.slice(0, 2).concat([{
                key: 'cancelled',
                label: 'Order Cancelled',
                status: 'cancelled',
                date: order.timestamps.cancelledAt,
                icon: XMarkIcon
            }])
        }

        return steps
    }, [order])

    const formatDate = useCallback((date) => {
        if (!date) return null
        return new Date(date).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        })
    }, [])

    return (
        <div className="bg-white rounded-xl border border-gray-200 p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-6">Order Timeline</h2>

            <div className="space-y-4">
                {timelineSteps.map((step, index) => {
                    const Icon = step.icon
                    const isLast = index === timelineSteps.length - 1

                    return (
                        <div key={step.key} className="flex items-start">
                            <div className="flex flex-col items-center">
                                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${step.status === 'completed' ? 'bg-green-100 text-green-600' :
                                        step.status === 'cancelled' ? 'bg-red-100 text-red-600' :
                                            'bg-gray-100 text-gray-400'
                                    }`}>
                                    <Icon className="h-4 w-4" />
                                </div>
                                {!isLast && (
                                    <div className={`w-px h-8 mt-2 ${step.status === 'completed' ? 'bg-green-200' : 'bg-gray-200'
                                        }`} />
                                )}
                            </div>

                            <div className="ml-4 flex-1">
                                <div className="flex items-center justify-between">
                                    <p className={`text-sm font-medium ${step.status === 'completed' ? 'text-gray-900' :
                                            step.status === 'cancelled' ? 'text-red-600' :
                                                'text-gray-500'
                                        }`}>
                                        {step.label}
                                    </p>
                                    {step.date && (
                                        <p className="text-xs text-gray-500">
                                            {formatDate(step.date)}
                                        </p>
                                    )}
                                </div>
                            </div>
                        </div>
                    )
                })}
            </div>
        </div>
    )
})

OrderTimeline.displayName = 'OrderTimeline'

// Memoized order item component
const OrderItem = memo(({ item, onReorderItem }) => {
    const [reorderLoading, setReorderLoading] = useState(false)

    const handleReorder = useCallback(async () => {
        setReorderLoading(true)
        await onReorderItem(item)
        setReorderLoading(false)
    }, [item, onReorderItem])

    return (
        <div className="flex items-center gap-4 p-4 bg-gray-50 rounded-xl">
            {item.image && (
                <img
                    src={item.image}
                    alt={item.name}
                    className="w-16 h-16 object-cover rounded-lg"
                />
            )}

            <div className="flex-1">
                <h4 className="font-medium text-gray-900">{item.name}</h4>
                <div className="flex items-center gap-4 mt-1 text-sm text-gray-600">
                    <span>Qty: {item.quantity}</span>
                    {item.size && <span>Size: {item.size}</span>}
                    {item.color && <span>Color: {item.color}</span>}
                </div>
                <p className="text-sm font-medium text-gray-900 mt-1">
                    ${item.price.toFixed(2)} each
                </p>
            </div>

            <div className="text-right">
                <p className="font-semibold text-gray-900">
                    ${(item.price * item.quantity).toFixed(2)}
                </p>
                <button
                    onClick={handleReorder}
                    disabled={reorderLoading}
                    className="mt-2 text-sm text-blue-600 hover:text-blue-800 disabled:opacity-50 transition-colors duration-200"
                >
                    {reorderLoading ? 'Adding...' : 'Reorder'}
                </button>
            </div>
        </div>
    )
})

OrderItem.displayName = 'OrderItem'

// Memoized shipping info component
const ShippingInfo = memo(({ order }) => {
    return (
        <div className="bg-white rounded-xl border border-gray-200 p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">Shipping Information</h2>

            <div className="space-y-4">
                {/* Shipping Address */}
                <div className="flex items-start gap-3">
                    <MapPinIcon className="h-5 w-5 text-gray-500 mt-0.5" />
                    <div>
                        <p className="font-medium text-gray-900">Shipping Address</p>
                        <div className="text-sm text-gray-600 mt-1">
                            <p>{order.shippingAddress.street}</p>
                            <p>{order.shippingAddress.city}, {order.shippingAddress.state} {order.shippingAddress.zipCode}</p>
                            <p>{order.shippingAddress.country}</p>
                        </div>
                    </div>
                </div>

                {/* Tracking Information */}
                {order.tracking?.number && (
                    <div className="flex items-start gap-3">
                        <TruckIcon className="h-5 w-5 text-gray-500 mt-0.5" />
                        <div>
                            <p className="font-medium text-gray-900">Tracking Information</p>
                            <div className="text-sm text-gray-600 mt-1">
                                <p>Carrier: {order.tracking.carrier}</p>
                                <p>Tracking Number:
                                    <span className="font-mono ml-1">{order.tracking.number}</span>
                                </p>
                                {order.tracking.estimatedDelivery && (
                                    <p>Estimated Delivery: {new Date(order.tracking.estimatedDelivery).toLocaleDateString()}</p>
                                )}
                            </div>
                        </div>
                    </div>
                )}

                {/* Payment Method */}
                <div className="flex items-start gap-3">
                    <CreditCardIcon className="h-5 w-5 text-gray-500 mt-0.5" />
                    <div>
                        <p className="font-medium text-gray-900">Payment Method</p>
                        <p className="text-sm text-gray-600 mt-1">
                            {order.paymentMethod.type} ending in {order.paymentMethod.last4}
                        </p>
                    </div>
                </div>
            </div>
        </div>
    )
})

ShippingInfo.displayName = 'ShippingInfo'

// Memoized order summary component
const OrderSummary = memo(({ order }) => {
    const summaryItems = useMemo(() => [
        { label: 'Subtotal', value: order.totals.subtotal },
        { label: 'Shipping', value: order.totals.shipping },
        { label: 'Tax', value: order.totals.tax },
        ...(order.totals.discount > 0 ? [{ label: 'Discount', value: -order.totals.discount }] : []),
        { label: 'Total', value: order.totals.total, isTotal: true }
    ], [order.totals])

    return (
        <div className="bg-gray-50 rounded-xl p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Order Summary</h3>

            <div className="space-y-3">
                {summaryItems.map((item, index) => (
                    <div key={index} className={`flex justify-between ${item.isTotal ? 'border-t border-gray-200 pt-3 text-lg font-semibold' : 'text-sm'
                        }`}>
                        <span className={item.isTotal ? 'text-gray-900' : 'text-gray-600'}>
                            {item.label}
                        </span>
                        <span className={`${item.isTotal ? 'text-gray-900' :
                                item.value < 0 ? 'text-green-600' : 'text-gray-900'
                            }`}>
                            ${Math.abs(item.value).toFixed(2)}
                        </span>
                    </div>
                ))}
            </div>
        </div>
    )
})

OrderSummary.displayName = 'OrderSummary'

export default function OrderDetailsPage() {
    const params = useParams()
    const router = useRouter()
    const [order, setOrder] = useState(null)
    const [loading, setLoading] = useState(true)
    const [error, setError] = useState(null)
    const [actionLoading, setActionLoading] = useState(null)
    const [actionMessage, setActionMessage] = useState(null)

    // Fetch order details
    useEffect(() => {
        const fetchOrder = async () => {
            try {
                setLoading(true)
                setError(null)

                const response = await fetch(`/api/orders/${params.id}`)

                if (!response.ok) {
                    if (response.status === 404) {
                        throw new Error('Order not found')
                    }
                    throw new Error('Failed to fetch order details')
                }

                const data = await response.json()
                setOrder(data.order)
            } catch (err) {
                setError(err.message)
            } finally {
                setLoading(false)
            }
        }

        if (params.id) {
            fetchOrder()
        }
    }, [params.id])

    // Check if order can be cancelled
    const canCancel = useMemo(() => {
        return order && ['pending', 'confirmed'].includes(order.status)
    }, [order])

    // Handle order cancellation
    const handleCancelOrder = useCallback(async () => {
        if (!order || !canCancel) return

        setActionLoading('cancel')
        try {
            const response = await fetch(`/api/orders/${order._id}/cancel`, {
                method: 'POST'
            })

            if (!response.ok) {
                throw new Error('Failed to cancel order')
            }

            // Refresh order data
            const updatedResponse = await fetch(`/api/orders/${params.id}`)
            const updatedData = await updatedResponse.json()
            setOrder(updatedData.order)

            setActionMessage({ type: 'success', text: 'Order cancelled successfully' })
        } catch (err) {
            setActionMessage({ type: 'error', text: err.message })
        } finally {
            setActionLoading(null)
        }
    }, [order, canCancel, params.id])

    // Handle reorder single item
    const handleReorderItem = useCallback(async (item) => {
        try {
            const response = await fetch('/api/cart/add', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    productId: item.productId,
                    quantity: item.quantity,
                    size: item.size,
                    color: item.color
                })
            })

            if (!response.ok) {
                throw new Error('Failed to add item to cart')
            }

            setActionMessage({ type: 'success', text: `${item.name} added to cart` })
        } catch (err) {
            setActionMessage({ type: 'error', text: err.message })
        }
    }, [])

    // Handle reorder all items
    const handleReorderAll = useCallback(async () => {
        setActionLoading('reorder')
        try {
            const response = await fetch(`/api/orders/${order._id}/reorder`, {
                method: 'POST'
            })

            if (!response.ok) {
                throw new Error('Failed to reorder items')
            }

            setActionMessage({ type: 'success', text: 'All items added to cart successfully' })
        } catch (err) {
            setActionMessage({ type: 'error', text: err.message })
        } finally {
            setActionLoading(null)
        }
    }, [order])

    // Clear action messages
    useEffect(() => {
        if (actionMessage) {
            const timer = setTimeout(() => setActionMessage(null), 5000)
            return () => clearTimeout(timer)
        }
    }, [actionMessage])

    if (loading) {
        return (
            <div className="min-h-screen flex items-center justify-center bg-gray-50">
                <LoadingSpinner size="lg" />
            </div>
        )
    }

    if (error) {
        return (
            <div className="min-h-screen flex items-center justify-center bg-gray-50">
                <div className="text-center">
                    <ExclamationTriangleIcon className="h-12 w-12 text-red-500 mx-auto mb-3" />
                    <h1 className="text-xl font-semibold text-gray-900 mb-2">Order Not Found</h1>
                    <p className="text-gray-600 mb-6">{error}</p>
                    <Link
                        href="/account/orders"
                        className="inline-flex items-center px-6 py-3 bg-black text-white rounded-xl hover:bg-gray-800 transition-colors duration-200"
                    >
                        <ArrowLeftIcon className="h-4 w-4 mr-2" />
                        Back to Orders
                    </Link>
                </div>
            </div>
        )
    }

    return (
        <div className="min-h-screen bg-gray-50">
            <div className="px-4 sm:px-6 lg:px-12 py-8">
                {/* Header */}
                <div className="mb-8">
                    <Link
                        href="/account/orders"
                        className="inline-flex items-center text-sm font-medium text-gray-600 hover:text-gray-900 mb-4 transition-colors duration-200"
                    >
                        <ArrowLeftIcon className="h-4 w-4 mr-2" />
                        Back to Orders
                    </Link>

                    <div className="flex items-center justify-between">
                        <div>
                            <h1 className="text-2xl font-bold text-gray-900">
                                Order #{order.orderNumber}
                            </h1>
                            <p className="text-gray-600 mt-1">
                                Placed on {new Date(order.timestamps.orderDate).toLocaleDateString('en-US', {
                                    year: 'numeric',
                                    month: 'long',
                                    day: 'numeric'
                                })}
                            </p>
                        </div>

                        <div className="flex items-center gap-3">
                            <button
                                onClick={() => window.print()}
                                className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors duration-200"
                            >
                                <PrinterIcon className="h-4 w-4" />
                                Print
                            </button>

                            <Link
                                href="/support"
                                className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors duration-200"
                            >
                                <ChatBubbleLeftIcon className="h-4 w-4" />
                                Get Help
                            </Link>
                        </div>
                    </div>
                </div>

                {/* Action Message */}
                {actionMessage && (
                    <div className={`mb-6 p-4 rounded-xl ${actionMessage.type === 'success' ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'
                        }`}>
                        <p className={`text-sm font-medium ${actionMessage.type === 'success' ? 'text-green-700' : 'text-red-700'
                            }`}>
                            {actionMessage.text}
                        </p>
                    </div>
                )}

                {/* Main Content */}
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    {/* Left Column - Order Items and Timeline */}
                    <div className="lg:col-span-2 space-y-8">
                        {/* Order Items */}
                        <div className="bg-white rounded-xl border border-gray-200 p-6">
                            <div className="flex items-center justify-between mb-6">
                                <h2 className="text-lg font-semibold text-gray-900">
                                    Order Items ({order.items.length})
                                </h2>
                                <button
                                    onClick={handleReorderAll}
                                    disabled={actionLoading === 'reorder'}
                                    className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-white bg-black rounded-lg hover:bg-gray-800 disabled:opacity-50 transition-colors duration-200"
                                >
                                    {actionLoading === 'reorder' ? (
                                        <LoadingSpinner size="sm" className="border-white" />
                                    ) : (
                                        <ArrowPathIcon className="h-4 w-4" />
                                    )}
                                    Reorder All
                                </button>
                            </div>

                            <div className="space-y-4">
                                {order.items.map((item, index) => (
                                    <OrderItem
                                        key={index}
                                        item={item}
                                        onReorderItem={handleReorderItem}
                                    />
                                ))}
                            </div>
                        </div>

                        {/* Order Timeline */}
                        <OrderTimeline order={order} />
                    </div>

                    {/* Right Column - Order Summary and Info */}
                    <div className="space-y-8">
                        {/* Order Summary */}
                        <OrderSummary order={order} />

                        {/* Shipping Information */}
                        <ShippingInfo order={order} />

                        {/* Order Actions */}
                        <div className="bg-white rounded-xl border border-gray-200 p-6">
                            <h3 className="text-lg font-semibold text-gray-900 mb-4">Order Actions</h3>

                            <div className="space-y-3">
                                {canCancel && (
                                    <button
                                        onClick={handleCancelOrder}
                                        disabled={actionLoading === 'cancel'}
                                        className="w-full flex items-center justify-center gap-2 px-4 py-2 text-sm font-medium text-red-700 bg-white border border-red-300 rounded-lg hover:bg-red-50 disabled:opacity-50 transition-colors duration-200"
                                    >
                                        {actionLoading === 'cancel' ? (
                                            <LoadingSpinner size="sm" className="border-red-600" />
                                        ) : (
                                            <XMarkIcon className="h-4 w-4" />
                                        )}
                                        Cancel Order
                                    </button>
                                )}

                                {order.status === 'delivered' && (
                                    <Link
                                        href={`/orders/${order._id}/return`}
                                        className="w-full flex items-center justify-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors duration-200"
                                    >
                                        <ArrowPathIcon className="h-4 w-4" />
                                        Return Items
                                    </Link>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}





















File: /app/account/page.js

'use client'

import { useAccountData } from '@/hooks/useAccountData'
import { useMemo, memo, useState, useRef, useEffect } from 'react'
import {
    ShoppingBagIcon,
    HeartIcon,
    MapPinIcon,
    UserIcon,
    CreditCardIcon,
    BellIcon,
    EyeIcon,
    TruckIcon,
    CheckCircleIcon,
    ExclamationTriangleIcon
} from '@heroicons/react/24/outline'
import Link from 'next/link'
import LoadingSpinner from '@/components/ui/LoadingSpinner'

// Memoized stat card component with enhanced styling
const StatCard = memo(({ title, value, description, icon: Icon, href, color = 'black', badge, trend }) => {
    const colorClasses = {
        black: 'hover:bg-black hover:text-white border-black',
        blue: 'hover:bg-blue-600 hover:text-white border-blue-600',
        green: 'hover:bg-green-600 hover:text-white border-green-600',
        purple: 'hover:bg-purple-600 hover:text-white border-purple-600'
    }

    return (
        <Link
            href={href}
            className={`block p-6 bg-white border-2 rounded-xl transition-all duration-200 group ${colorClasses[color]} hover:shadow-md relative overflow-hidden`}
        >
            {badge && (
                <div className="absolute top-3 right-3">
                    <span className="bg-red-500 text-white text-xs px-2 py-1 rounded-full">
                        {badge}
                    </span>
                </div>
            )}

            <div className="flex items-center justify-between">
                <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                        <h3 className="text-2xl font-bold text-gray-900 group-hover:text-white transition-colors duration-200">
                            {value}
                        </h3>
                        {trend && (
                            <span className={`text-xs px-2 py-1 rounded-full ${trend > 0 ? 'bg-green-100 text-green-800 group-hover:bg-green-200' :
                                    trend < 0 ? 'bg-red-100 text-red-800 group-hover:bg-red-200' :
                                        'bg-gray-100 text-gray-800 group-hover:bg-gray-200'
                                }`}>
                                {trend > 0 ? `+${trend}%` : `${trend}%`}
                            </span>
                        )}
                    </div>
                    <p className="text-sm font-medium text-gray-600 group-hover:text-gray-200 transition-colors duration-200">
                        {title}
                    </p>
                    <p className="text-xs text-gray-500 group-hover:text-gray-300 transition-colors duration-200 mt-2">
                        {description}
                    </p>
                </div>
                <Icon className="h-8 w-8 text-gray-400 group-hover:text-white transition-colors duration-200" />
            </div>
        </Link>
    )
})

StatCard.displayName = 'StatCard'

// Memoized welcome section with profile completion
const WelcomeSection = memo(({ user, profileCompletion }) => {
    const welcomeMessage = useMemo(() => {
        const hour = new Date().getHours()
        if (hour < 12) return 'Good morning'
        if (hour < 18) return 'Good afternoon'
        return 'Good evening'
    }, [])

    return (
        <div className="p-6 border-b border-gray-200 bg-gradient-to-r from-blue-50 to-purple-50">
            <div className="flex items-center justify-between">
                <div className="flex-1">
                    <h1 className="text-2xl font-bold text-gray-900">
                        {welcomeMessage}, {user.profile?.name || 'there'}!
                    </h1>
                    <p className="text-gray-600 mt-2">
                        Manage your account settings and view your activity
                    </p>
                </div>

                {/* Profile Completion Widget */}
                <div className="hidden sm:block bg-white rounded-xl p-4 shadow-sm border border-gray-200">
                    <div className="flex items-center gap-3">
                        <div className="relative w-12 h-12">
                            <svg className="w-12 h-12 transform -rotate-90" viewBox="0 0 100 100">
                                <circle
                                    cx="50"
                                    cy="50"
                                    r="40"
                                    stroke="#E5E7EB"
                                    strokeWidth="8"
                                    fill="none"
                                />
                                <circle
                                    cx="50"
                                    cy="50"
                                    r="40"
                                    stroke={profileCompletion >= 80 ? "#10B981" : profileCompletion >= 50 ? "#F59E0B" : "#EF4444"}
                                    strokeWidth="8"
                                    fill="none"
                                    strokeDasharray={`${profileCompletion * 2.51} 251`}
                                    strokeLinecap="round"
                                    className="transition-all duration-500"
                                />
                            </svg>
                            <div className="absolute inset-0 flex items-center justify-center">
                                <span className="text-xs font-semibold text-gray-700">
                                    {profileCompletion}%
                                </span>
                            </div>
                        </div>
                        <div>
                            <p className="text-sm font-semibold text-gray-900">Profile</p>
                            <p className="text-xs text-gray-500">
                                {profileCompletion < 100 ? 'Complete your profile' : 'Complete!'}
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
})

WelcomeSection.displayName = 'WelcomeSection'

// Recent activity component
const RecentActivity = memo(({ activities }) => {
    const activityRef = useRef(null)

    if (!activities || activities.length === 0) {
        return (
            <div className="bg-gray-50 rounded-xl p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Activity</h3>
                <div className="text-center py-8">
                    <EyeIcon className="h-12 w-12 text-gray-400 mx-auto mb-3" />
                    <p className="text-gray-500">No recent activity</p>
                </div>
            </div>
        )
    }

    return (
        <div className="bg-gray-50 rounded-xl p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Activity</h3>
            <div ref={activityRef} className="space-y-3 max-h-64 overflow-y-auto">
                {activities.slice(0, 5).map((activity, index) => (
                    <div key={index} className="flex items-center gap-3 bg-white rounded-lg p-3">
                        <div className={`p-2 rounded-full ${activity.type === 'order' ? 'bg-blue-100 text-blue-600' :
                                activity.type === 'wishlist' ? 'bg-red-100 text-red-600' :
                                    'bg-gray-100 text-gray-600'
                            }`}>
                            {activity.type === 'order' ? <ShoppingBagIcon className="h-4 w-4" /> :
                                activity.type === 'wishlist' ? <HeartIcon className="h-4 w-4" /> :
                                    <EyeIcon className="h-4 w-4" />}
                        </div>
                        <div className="flex-1 min-w-0">
                            <p className="text-sm font-medium text-gray-900 truncate">
                                {activity.title}
                            </p>
                            <p className="text-xs text-gray-500">
                                {activity.time}
                            </p>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    )
})

RecentActivity.displayName = 'RecentActivity'

// Quick actions component with dynamic content
const QuickActions = memo(({ user, profileCompletion }) => {
    const [hoveredAction, setHoveredAction] = useState(null)

    const quickActions = useMemo(() => {
        const actions = [
            {
                title: 'Edit Profile',
                description: 'Update your personal information',
                href: '/account/profile',
                icon: UserIcon,
                priority: profileCompletion < 100 ? 'high' : 'normal'
            },
            {
                title: 'View Orders',
                description: 'Track your recent purchases',
                href: '/account/orders',
                icon: ShoppingBagIcon,
                priority: 'normal'
            },
            {
                title: 'Manage Addresses',
                description: 'Add or edit shipping addresses',
                href: '/account/addresses',
                icon: MapPinIcon,
                priority: (user.addresses?.length || 0) === 0 ? 'high' : 'normal'
            },
            {
                title: 'View Wishlist',
                description: 'See your saved items',
                href: '/wishlist',
                icon: HeartIcon,
                priority: 'normal'
            }
        ]

        // Sort by priority
        return actions.sort((a, b) => a.priority === 'high' ? -1 : 1)
    }, [user, profileCompletion])

    return (
        <div className="bg-gray-50 rounded-xl p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h3>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                {quickActions.map((action, index) => (
                    <Link
                        key={action.title}
                        href={action.href}
                        onMouseEnter={() => setHoveredAction(index)}
                        onMouseLeave={() => setHoveredAction(null)}
                        className={`flex items-center p-4 bg-white rounded-lg transition-all duration-200 group relative ${action.priority === 'high' ? 'ring-2 ring-blue-200 hover:ring-blue-300' : 'hover:bg-gray-100'
                            }`}
                    >
                        {action.priority === 'high' && (
                            <div className="absolute top-2 right-2">
                                <ExclamationTriangleIcon className="h-4 w-4 text-blue-600" />
                            </div>
                        )}

                        <action.icon className={`h-5 w-5 mr-3 transition-colors duration-200 ${hoveredAction === index ? 'text-black' : 'text-gray-500'
                            }`} />
                        <div className="flex-1">
                            <span className={`text-sm font-medium transition-colors duration-200 ${hoveredAction === index ? 'text-black' : 'text-gray-700'
                                }`}>
                                {action.title}
                            </span>
                            <p className="text-xs text-gray-500 mt-1">
                                {action.description}
                            </p>
                        </div>
                    </Link>
                ))}
            </div>
        </div>
    )
})

QuickActions.displayName = 'QuickActions'

export default function AccountPage() {
    const { user, loading, error } = useAccountData()
    const [recentActivities, setRecentActivities] = useState([])

    // Calculate profile completion percentage using useMemo
    const profileCompletion = useMemo(() => {
        if (!user) return 0

        let completed = 0
        const total = 6

        if (user.profile?.name) completed++
        if (user.profile?.phone) completed++
        if (user.profile?.avatar) completed++
        if (user.addresses?.length > 0) completed++
        if (user.preferences?.categories?.length > 0) completed++
        if (user.email) completed++

        return Math.round((completed / total) * 100)
    }, [user])

    // Account stats with memoization
    const accountStats = useMemo(() => {
        if (!user) return []

        return [
            {
                title: 'Total Orders',
                value: user.orders?.length || 0,
                description: 'Your purchase history',
                icon: ShoppingBagIcon,
                href: '/account/orders',
                color: 'black',
                trend: 0 // You can calculate this based on recent vs older orders
            },
            {
                title: 'Wishlist Items',
                value: user.wishlist?.length || 0,
                description: 'Items you want to buy',
                icon: HeartIcon,
                href: '/wishlist',
                color: 'blue',
                badge: user.wishlist?.length > 10 ? 'Full' : null
            },
            {
                title: 'Saved Addresses',
                value: user.addresses?.length || 0,
                description: 'Shipping locations',
                icon: MapPinIcon,
                href: '/account/addresses',
                color: 'green',
                badge: (user.addresses?.length || 0) === 0 ? 'Setup' : null
            },
            {
                title: 'Profile Score',
                value: `${profileCompletion}%`,
                description: 'Profile completion',
                icon: UserIcon,
                href: '/account/profile',
                color: 'purple',
                badge: profileCompletion < 100 ? 'Incomplete' : null
            }
        ]
    }, [user, profileCompletion])

    // Simulate recent activities (replace with real data)
    useEffect(() => {
        if (user && recentActivities.length === 0) {
            const mockActivities = [
                {
                    type: 'order',
                    title: 'Order #12345 shipped',
                    time: '2 hours ago'
                },
                {
                    type: 'wishlist',
                    title: 'Added item to wishlist',
                    time: '1 day ago'
                },
                {
                    type: 'view',
                    title: 'Viewed product details',
                    time: '2 days ago'
                }
            ]
            setRecentActivities(mockActivities)
        }
    }, [user, recentActivities.length])

    if (loading) {
        return (
            <div className="h-full flex items-center justify-center">
                <LoadingSpinner size="lg" />
            </div>
        )
    }

    if (error) {
        return (
            <div className="h-full flex items-center justify-center">
                <div className="text-center">
                    <ExclamationTriangleIcon className="h-12 w-12 text-red-500 mx-auto mb-3" />
                    <p className="text-red-600 font-medium">Error loading account data</p>
                    <p className="text-gray-500 text-sm mt-1">{error}</p>
                </div>
            </div>
        )
    }

    if (!user) {
        return null
    }

    return (
        <div className="h-full w-full">
            {/* Welcome Section */}
            <WelcomeSection user={user} profileCompletion={profileCompletion} />

            {/* Dashboard Content */}
            <div className="p-6 w-full">
                {/* Account Stats */}
                <div className="mb-8">
                    <h2 className="text-lg font-semibold text-gray-900 mb-6">Account Overview</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6">
                        {accountStats.map((stat) => (
                            <StatCard
                                key={stat.title}
                                title={stat.title}
                                value={stat.value}
                                description={stat.description}
                                icon={stat.icon}
                                href={stat.href}
                                color={stat.color}
                                badge={stat.badge}
                                trend={stat.trend}
                            />
                        ))}
                    </div>
                </div>

                {/* Bottom Section - Recent Activity & Quick Actions */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    <RecentActivity activities={recentActivities} />
                    <QuickActions user={user} profileCompletion={profileCompletion} />
                </div>
            </div>
        </div>
    )
}





















File: /app/account/preferences/page.js

'use client'

import { useState, useRef, useMemo, useCallback, useEffect, memo } from 'react'
import { useAccountData } from '@/hooks/useAccountData'
import {
    AdjustmentsHorizontalIcon,
    BellIcon,
    CurrencyDollarIcon,
    CheckCircleIcon,
    ExclamationTriangleIcon,
    CheckIcon
} from '@heroicons/react/24/outline'
import { validatePreferences } from '@/lib/validations/userValidation'
import LoadingSpinner from '@/components/ui/LoadingSpinner'

// Memoized Toggle Switch Component
const ToggleSwitch = memo(({ name, label, description, checked, onChange, disabled = false }) => {
    return (
        <div className="flex items-center justify-between py-4">
            <div className="flex-1">
                <label htmlFor={name} className="text-sm font-medium text-gray-900 cursor-pointer">
                    {label}
                </label>
                {description && (
                    <p className="text-xs text-gray-500 mt-1">{description}</p>
                )}
            </div>
            <button
                type="button"
                id={name}
                name={name}
                disabled={disabled}
                onClick={() => onChange(!checked)}
                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-black focus:ring-offset-2 disabled:opacity-50 ${checked ? 'bg-black' : 'bg-gray-200'
                    }`}
            >
                <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${checked ? 'translate-x-6' : 'translate-x-1'
                        }`}
                />
            </button>
        </div>
    )
})
ToggleSwitch.displayName = 'ToggleSwitch'

// Memoized Price Range Slider Component
const PriceRangeSlider = memo(({ min, max, onChange, disabled = false }) => {
    return (
        <div className="space-y-4">
            <div className="flex justify-between text-sm text-gray-600">
                <span>₹{min.toLocaleString()}</span>
                <span>₹{max.toLocaleString()}</span>
            </div>
            <div className="space-y-3">
                <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">Minimum Price</label>
                    <input
                        type="range"
                        min="0"
                        max="100000"
                        step="1000"
                        value={min}
                        onChange={(e) => onChange(parseInt(e.target.value), max)}
                        disabled={disabled}
                        className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                    />
                </div>
                <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">Maximum Price</label>
                    <input
                        type="range"
                        min="1000"
                        max="200000"
                        step="1000"
                        value={max}
                        onChange={(e) => onChange(min, parseInt(e.target.value))}
                        disabled={disabled}
                        className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                    />
                </div>
            </div>
        </div>
    )
})
PriceRangeSlider.displayName = 'PriceRangeSlider'

const CustomCheckbox = memo(({ name, label, checked, onChange, disabled = false }) => {
    return (
        <label className={`flex items-center space-x-3 cursor-pointer group ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`}>
            <div className="relative">
                <input
                    type="checkbox"
                    name={name}
                    checked={checked}
                    onChange={onChange}
                    disabled={disabled}
                    className="sr-only"
                />
                <div className={`w-5 h-5 rounded-lg border-2 transition-all duration-200 flex items-center justify-center ${
                    checked 
                        ? 'bg-black border-black' 
                        : 'bg-white border-gray-300 group-hover:border-gray-400'
                } ${!disabled && 'group-hover:shadow-sm'}`}>
                    {checked && (
                        <CheckIcon className="h-3 w-3 text-white" strokeWidth={3} />
                    )}
                </div>
            </div>
            <span className={`text-sm font-medium transition-colors duration-200 ${
                checked ? 'text-gray-900' : 'text-gray-700'
            } ${!disabled && 'group-hover:text-gray-900'}`}>
                {label}
            </span>
        </label>
    )
})
CustomCheckbox.displayName = 'CustomCheckbox'

// Updated Category Selector Component with enhanced styling
const CategorySelector = memo(({ categories, selectedCategories, onChange, disabled = false }) => {
    return (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            {categories.map((category) => (
                <CustomCheckbox
                    key={category}
                    name={`category-${category}`}
                    label={category}
                    checked={selectedCategories.includes(category)}
                    onChange={(e) => {
                        if (e.target.checked) {
                            onChange([...selectedCategories, category])
                        } else {
                            onChange(selectedCategories.filter(c => c !== category))
                        }
                    }}
                    disabled={disabled}
                />
            ))}
        </div>
    )
})
CategorySelector.displayName = 'CategorySelector'

// Memoized Success Message Component
const SuccessMessage = memo(({ show, message, onClose }) => {
    useEffect(() => {
        if (show) {
            const timer = setTimeout(onClose, 5000)
            return () => clearTimeout(timer)
        }
    }, [show, onClose])

    if (!show) return null

    return (
        <div className="bg-emerald-50 border border-emerald-200 rounded-xl p-4 mb-6">
            <div className="flex items-center gap-2">
                <CheckCircleIcon className="h-5 w-5 text-emerald-600" />
                <p className="text-emerald-700 font-medium">{message}</p>
            </div>
        </div>
    )
})
SuccessMessage.displayName = 'SuccessMessage'

// Main Preferences Page Component
export default function PreferencesPage() {
    const { user, preferences: userPreferences, updatePreferences, preferencesLoading } = useAccountData()

    // Local form state (not auto-saved)
    const [preferences, setPreferences] = useState({
        categories: [],
        priceRange: { min: 0, max: 50000 },
        currency: 'INR',
        notifications: {
            email: true,
            push: true,
            orderUpdates: true,
            deals: true,
            newArrivals: false
        },
        privacy: {
            showEmail: false,
            profileVisibility: 'public'
        }
    })

    // UI state
    const [loading, setLoading] = useState(false)
    const [errors, setErrors] = useState({})
    const [success, setSuccess] = useState({ show: false, message: '' })

    // Available categories
    const availableCategories = useMemo(() => [
        'Electronics', 'Fashion', 'Home & Garden', 'Sports', 'Books', 'Beauty',
        'Automotive', 'Health', 'Toys', 'Grocery', 'Art', 'Music'
    ], [])

    // Initialize preferences from user data
    useEffect(() => {
        if (userPreferences) {
            setPreferences(prev => ({
                ...prev,
                categories: userPreferences.categories || [],
                priceRange: userPreferences.priceRange || { min: 0, max: 50000 },
                currency: userPreferences.currency || 'INR',
                notifications: userPreferences.notifications || {
                    email: true,
                    push: true,
                    orderUpdates: true,
                    deals: true,
                    newArrivals: false
                }
            }))
        }
    }, [userPreferences])

    // Check if there are unsaved changes
    const hasChanges = useMemo(() => {
        if (!userPreferences) return false

        return (
            JSON.stringify(preferences.categories) !== JSON.stringify(userPreferences.categories || []) ||
            JSON.stringify(preferences.priceRange) !== JSON.stringify(userPreferences.priceRange || { min: 0, max: 50000 }) ||
            preferences.currency !== (userPreferences.currency || 'INR') ||
            JSON.stringify(preferences.notifications) !== JSON.stringify(userPreferences.notifications || {
                email: true,
                push: true,
                orderUpdates: true,
                deals: true,
                newArrivals: false
            }) ||
            JSON.stringify(preferences.privacy) !== JSON.stringify(userPreferences.privacy || {
                showEmail: false,
                profileVisibility: 'public'
            })
        )
    }, [preferences, userPreferences])

    // Handle local preference changes (no API call)
    const handlePreferenceChange = useCallback((section, data) => {
        setPreferences(prev => ({
            ...prev,
            [section]: data
        }))
    }, [])

    // Handle save all changes
    const handleSaveChanges = useCallback(async () => {
        setLoading(true)
        setErrors({})

        try {
            const validation = validatePreferences(preferences)
            if (!validation.isValid) {
                setErrors(validation.errors)
                return
            }

            const result = await updatePreferences(preferences)

            if (result.success) {
                setSuccess({ show: true, message: 'Preferences saved successfully!' })
            } else {
                setErrors({ submit: result.error })
            }
        } catch (error) {
            setErrors({ submit: 'Failed to save preferences' })
        } finally {
            setLoading(false)
        }
    }, [preferences, updatePreferences])

    // Handle discard changes
    const handleDiscardChanges = useCallback(() => {
        if (userPreferences) {
            setPreferences(prev => ({
                ...prev,
                categories: userPreferences.categories || [],
                priceRange: userPreferences.priceRange || { min: 0, max: 50000 },
                currency: userPreferences.currency || 'INR',
                notifications: userPreferences.notifications || {
                    email: true,
                    push: true,
                    orderUpdates: true,
                    deals: true,
                    newArrivals: false
                }
            }))
        }
        setErrors({})
    }, [userPreferences])

    if (preferencesLoading) {
        return (
            <div className="h-full flex items-center justify-center">
                <LoadingSpinner size="lg" />
            </div>
        )
    }

    return (
        <div className="h-full w-full">
            {/* Header */}
            <div className="p-6 border-b border-gray-200 bg-white">
                <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                        <AdjustmentsHorizontalIcon className="h-8 w-8 text-gray-600" />
                        <div>
                            <h1 className="text-2xl font-bold text-gray-900">Preferences</h1>
                            <p className="text-gray-600 mt-1">Customize your shopping experience</p>
                        </div>
                    </div>

                    {/* Unsaved Changes Indicator */}
                    {hasChanges && (
                        <div className="text-sm text-amber-600 bg-amber-50 px-3 py-1 rounded-lg border border-amber-200">
                            Unsaved changes
                        </div>
                    )}
                </div>
            </div>

            {/* Content */}
            <div className="p-6 space-y-8">
                <SuccessMessage
                    show={success.show}
                    message={success.message}
                    onClose={() => setSuccess({ show: false, message: '' })}
                />

                {/* Shopping Preferences */}
                <div className="bg-gray-50 rounded-xl p-6">
                    <div className="flex items-center gap-2 mb-6">
                        <CurrencyDollarIcon className="h-5 w-5 text-gray-600" />
                        <h2 className="text-lg font-semibold text-gray-900">Shopping Preferences</h2>
                    </div>

                    <div className="space-y-6">
                        {/* Currency */}
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                Currency
                            </label>
                            <select
                                value={preferences.currency}
                                onChange={(e) => handlePreferenceChange('currency', e.target.value)}
                                disabled={loading}
                                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-black focus:border-black transition-all duration-200"
                            >
                                <option value="INR">₹ Indian Rupee (INR)</option>
                                <option value="USD">$ US Dollar (USD)</option>
                                <option value="EUR">€ Euro (EUR)</option>
                            </select>
                        </div>

                        {/* Price Range */}
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-4">
                                Price Range
                            </label>
                            <PriceRangeSlider
                                min={preferences.priceRange.min}
                                max={preferences.priceRange.max}
                                onChange={(min, max) => handlePreferenceChange('priceRange', { min, max })}
                                disabled={loading}
                            />
                        </div>

                        {/* Categories */}
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-4">
                                Preferred Categories
                            </label>
                            <CategorySelector
                                categories={availableCategories}
                                selectedCategories={preferences.categories}
                                onChange={(categories) => handlePreferenceChange('categories', categories)}
                                disabled={loading}
                            />
                        </div>
                    </div>
                </div>

                {/* Notification Settings */}
                <div className="bg-gray-50 rounded-xl p-6">
                    <div className="flex items-center gap-2 mb-6">
                        <BellIcon className="h-5 w-5 text-gray-600" />
                        <h2 className="text-lg font-semibold text-gray-900">Notification Settings</h2>
                    </div>

                    <div className="space-y-1 divide-y divide-gray-200">
                        <ToggleSwitch
                            name="email"
                            label="Email Notifications"
                            description="Receive important updates via email"
                            checked={preferences.notifications.email}
                            onChange={(checked) => handlePreferenceChange('notifications', {
                                ...preferences.notifications,
                                email: checked
                            })}
                            disabled={loading}
                        />
                        <ToggleSwitch
                            name="orderUpdates"
                            label="Order Updates"
                            description="Get notified about order status changes"
                            checked={preferences.notifications.orderUpdates}
                            onChange={(checked) => handlePreferenceChange('notifications', {
                                ...preferences.notifications,
                                orderUpdates: checked
                            })}
                            disabled={loading}
                        />
                        <ToggleSwitch
                            name="deals"
                            label="Deals & Offers"
                            description="Receive notifications about special deals"
                            checked={preferences.notifications.deals}
                            onChange={(checked) => handlePreferenceChange('notifications', {
                                ...preferences.notifications,
                                deals: checked
                            })}
                            disabled={loading}
                        />
                        <ToggleSwitch
                            name="newArrivals"
                            label="New Arrivals"
                            description="Get notified about new products"
                            checked={preferences.notifications.newArrivals}
                            onChange={(checked) => handlePreferenceChange('notifications', {
                                ...preferences.notifications,
                                newArrivals: checked
                            })}
                            disabled={loading}
                        />
                    </div>
                </div>

                {/* Error Display */}
                {errors.submit && (
                    <div className="bg-red-50 border border-red-200 rounded-xl p-4">
                        <div className="flex items-center gap-2">
                            <ExclamationTriangleIcon className="h-5 w-5 text-red-600" />
                            <p className="text-red-700 font-medium">{errors.submit}</p>
                        </div>
                    </div>
                )}

                {/* Save/Discard Buttons */}
                {hasChanges && (
                    <div className="bg-white border border-gray-200 rounded-xl p-6">
                        <div className="flex items-center justify-between">
                            <div>
                                <h3 className="text-sm font-medium text-gray-900">Unsaved Changes</h3>
                                <p className="text-xs text-gray-500 mt-1">You have unsaved changes to your preferences</p>
                            </div>
                            <div className="flex gap-3">
                                <button
                                    onClick={handleDiscardChanges}
                                    disabled={loading}
                                    className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 disabled:opacity-50 transition-colors duration-200"
                                >
                                    Discard Changes
                                </button>
                                <button
                                    onClick={handleSaveChanges}
                                    disabled={loading}
                                    className="px-6 py-2 text-sm font-medium text-white bg-black rounded-lg hover:bg-gray-800 disabled:opacity-50 transition-colors duration-200 flex items-center gap-2"
                                >
                                    {loading ? (
                                        <>
                                            <LoadingSpinner size="sm" className="border-white" />
                                            Saving...
                                        </>
                                    ) : (
                                        <>
                                            <CheckCircleIcon className="h-4 w-4" />
                                            Save Changes
                                        </>
                                    )}
                                </button>
                            </div>
                        </div>
                    </div>
                )}
            </div>
        </div>
    )
}





















File: /app/account/profile/page.js

'use client'

import { useAccountData } from '@/hooks/useAccountData'
import { useState, useRef, useMemo, useCallback, memo } from 'react'
import {
    CameraIcon,
    CheckCircleIcon,
    ExclamationTriangleIcon
} from '@heroicons/react/24/outline'
import { validateProfile, formatPhoneNumber } from '@/lib/validations/userValidation'
import LoadingSpinner from '@/components/ui/LoadingSpinner'

// Memoized form field component
const FormField = memo(({
    label,
    name,
    type = 'text',
    value,
    onChange,
    onBlur,
    error,
    placeholder,
    required = false,
    disabled = false
}) => {
    return (
        <div className="space-y-2">
            <label htmlFor={name} className="block text-sm font-medium text-gray-700">
                {label} {required && <span className="text-red-500">*</span>}
            </label>
            <input
                id={name}
                name={name}
                type={type}
                value={value}
                onChange={onChange}
                onBlur={onBlur}
                placeholder={placeholder}
                disabled={disabled}
                className={`w-full px-4 py-3 text-sm border-2 rounded-xl bg-white text-black placeholder:text-gray-500 focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200 disabled:bg-gray-50 disabled:text-gray-500 ${error ? 'border-red-300 focus:ring-red-500 focus:border-red-500' : 'border-gray-300'
                    }`}
            />
            {error && (
                <p className="text-sm text-red-600 flex items-center gap-1">
                    <ExclamationTriangleIcon className="h-4 w-4" />
                    {error}
                </p>
            )}
        </div>
    )
})

FormField.displayName = 'FormField'

// Memoized avatar upload component
const AvatarUpload = memo(({ currentAvatar, onAvatarChange, uploading, user }) => {
    const fileInputRef = useRef(null)
    const [preview, setPreview] = useState(currentAvatar)

    const handleFileSelect = useCallback((event) => {
        const file = event.target.files[0]
        if (file) {
            // Validate file type and size
            if (!file.type.startsWith('image/')) {
                alert('Please select an image file')
                return
            }

            if (file.size > 10 * 1024 * 1024) { // 10MB limit
                alert('File size must be less than 10MB')
                return
            }

            // Create preview immediately
            const reader = new FileReader()
            reader.onload = (e) => {
                setPreview(e.target.result)
            }
            reader.readAsDataURL(file)

            // Call parent handler with the file
            onAvatarChange(file)
        }
    }, [onAvatarChange])

    const handleUploadClick = useCallback(() => {
        fileInputRef.current?.click()
    }, [])

    // Get user initials for fallback
    const initials = useMemo(() => {
        if (user?.profile?.name) {
            return user.profile.name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2)
        }
        if (user?.email) {
            return user.email[0].toUpperCase()
        }
        return 'U'
    }, [user])

    return (
        <div className="flex flex-col items-center space-y-4">
            <div className="relative">
                <div className="w-24 h-24 rounded-full overflow-hidden border-4 border-gray-200 bg-gray-100">
                    {preview ? (
                        <img
                            src={preview}
                            alt="Profile avatar"
                            className="w-full h-full object-cover"
                        />
                    ) : (
                        <div className="w-full h-full bg-black text-white flex items-center justify-center text-xl font-medium">
                            {initials}
                        </div>
                    )}
                </div>

                <button
                    type="button"
                    onClick={handleUploadClick}
                    disabled={uploading}
                    className="absolute bottom-0 right-0 p-2 bg-black text-white rounded-full hover:bg-gray-800 transition-colors duration-200 disabled:opacity-50"
                >
                    {uploading ? (
                        <LoadingSpinner size="sm" className="border-white" />
                    ) : (
                        <CameraIcon className="h-4 w-4" />
                    )}
                </button>
            </div>

            <input
                ref={fileInputRef}
                type="file"
                accept="image/*"
                onChange={handleFileSelect}
                className="hidden"
            />

            <p className="text-xs text-gray-500 text-center max-w-xs">
                Click the camera icon to upload a new profile picture. Max file size: 10MB
            </p>
        </div>
    )
})

AvatarUpload.displayName = 'AvatarUpload'

// Memoized save button with loading state
const SaveButton = memo(({ loading, hasChanges, onClick }) => {
    return (
        <button
            type="submit"
            onClick={onClick}
            disabled={loading || !hasChanges}
            className="w-full sm:w-auto px-6 py-3 bg-black text-white rounded-xl hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 flex items-center justify-center gap-2"
        >
            {loading ? (
                <>
                    <LoadingSpinner size="sm" className="border-white" />
                    Saving...
                </>
            ) : (
                <>
                    <CheckCircleIcon className="h-5 w-5" />
                    Save Changes
                </>
            )}
        </button>
    )
})

SaveButton.displayName = 'SaveButton'

// Memoized success message component
const SuccessMessage = memo(({ show, message }) => {
    if (!show) return null

    return (
        <div className="bg-green-50 border border-green-200 rounded-xl p-4 mb-6">
            <div className="flex items-center gap-2">
                <CheckCircleIcon className="h-5 w-5 text-green-600" />
                <p className="text-green-700 font-medium">{message}</p>
            </div>
        </div>
    )
})

SuccessMessage.displayName = 'SuccessMessage'

export default function ProfilePage() {
    const { user, profileData, updateProfile, loading: dataLoading } = useAccountData()

    // Form state management
    const [formData, setFormData] = useState({
        name: '',
        phone: '',
        email: ''
    })

    // UI state
    const [errors, setErrors] = useState({})
    const [loading, setLoading] = useState(false)
    const [avatarUploading, setAvatarUploading] = useState(false)
    const [showSuccess, setShowSuccess] = useState(false)
    const [selectedAvatarUrl, setSelectedAvatarUrl] = useState(null)
    const [selectedAvatarPublicId, setSelectedAvatarPublicId] = useState(null)

    // Refs for form inputs that don't need immediate validation
    const nameRef = useRef(null)
    const phoneRef = useRef(null)

    // Initialize form data when user data loads
    useMemo(() => {
        if (profileData) {
            setFormData({
                name: profileData.name || '',
                phone: profileData.phone || '',
                email: profileData.email || ''
            })
        }
    }, [profileData])

    // Memoized validation to prevent unnecessary recalculations
    const validationResult = useMemo(() => {
        return validateProfile(formData)
    }, [formData])

    // Check if form has changes
    const hasChanges = useMemo(() => {
        if (!profileData) return false

        return (
            formData.name !== (profileData.name || '') ||
            formData.phone !== (profileData.phone || '') ||
            selectedAvatarUrl !== null
        )
    }, [formData, profileData, selectedAvatarUrl])

    // Handle input changes
    const handleInputChange = useCallback((e) => {
        const { name, value } = e.target

        setFormData(prev => ({
            ...prev,
            [name]: name === 'phone' ? formatPhoneNumber(value) : value
        }))

        // Clear error when user starts typing
        if (errors[name]) {
            setErrors(prev => ({
                ...prev,
                [name]: ''
            }))
        }
    }, [errors])

    // Handle input blur for validation
    const handleInputBlur = useCallback((e) => {
        const { name } = e.target

        if (!validationResult.isValid && validationResult.errors[name]) {
            setErrors(prev => ({
                ...prev,
                [name]: validationResult.errors[name]
            }))
        }
    }, [validationResult])

    // Handle avatar change with Cloudinary upload
    const handleAvatarChange = useCallback(async (file) => {
        setAvatarUploading(true)
        setErrors(prev => ({ ...prev, avatar: '' })) // Clear any previous avatar errors

        try {
            // Upload directly to Cloudinary
            const formData = new FormData()
            formData.append('file', file)
            formData.append('upload_preset', 'profile-pictures') // Your Cloudinary upload preset
            formData.append('folder', 'profile-pictures')

            const response = await fetch(
                `https://api.cloudinary.com/v1_1/${process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME}/image/upload`,
                {
                    method: 'POST',
                    body: formData,
                }
            )

            if (!response.ok) {
                const errorData = await response.json()
                throw new Error(errorData.error?.message || 'Upload failed')
            }

            const result = await response.json()

            // Store the uploaded image URL and public_id
            setSelectedAvatarUrl(result.secure_url)
            setSelectedAvatarPublicId(result.public_id)

        } catch (error) {
            console.error('Avatar upload error:', error)
            setErrors(prev => ({
                ...prev,
                avatar: `Failed to upload image: ${error.message}`
            }))

            // Reset preview to current avatar on error
            const avatarUpload = document.querySelector('[alt="Profile avatar"]')
            if (avatarUpload && profileData?.avatar) {
                avatarUpload.src = profileData.avatar
            }
        } finally {
            setAvatarUploading(false)
        }
    }, [profileData])

    // Handle form submission
    const handleSubmit = useCallback(async (e) => {
        e.preventDefault()

        if (!validationResult.isValid) {
            setErrors(validationResult.errors)
            return
        }

        setLoading(true)
        setErrors({})

        try {
            const updateData = {
                profile: {
                    name: formData.name.trim(),
                    phone: formData.phone.trim(),
                    avatar: selectedAvatarUrl || profileData.avatar,
                    avatarPublicId: selectedAvatarPublicId || profileData.avatarPublicId
                }
            }

            const result = await updateProfile(updateData)

            if (result.success) {
                setShowSuccess(true)
                setSelectedAvatarUrl(null)
                setSelectedAvatarPublicId(null)

                // Hide success message after 3 seconds
                setTimeout(() => setShowSuccess(false), 3000)
            } else {
                setErrors({ submit: result.error || 'Failed to update profile' })
            }
        } catch (error) {
            console.error('Profile update error:', error)
            setErrors({ submit: 'An unexpected error occurred' })
        } finally {
            setLoading(false)
        }
    }, [formData, validationResult, updateProfile, profileData, selectedAvatarUrl, selectedAvatarPublicId])

    if (dataLoading) {
        return (
            <div className="h-full flex items-center justify-center">
                <LoadingSpinner size="lg" />
            </div>
        )
    }

    if (!user) {
        return (
            <div className="h-full flex items-center justify-center">
                <p className="text-gray-500">Unable to load profile data</p>
            </div>
        )
    }

    return (
        <div className="h-full w-full">
            {/* Header */}
            <div className="p-6 border-b border-gray-200">
                <h1 className="text-2xl font-bold text-gray-900">Profile Settings</h1>
                <p className="text-gray-600 mt-2">
                    Manage your personal information and preferences
                </p>
            </div>

            {/* Content */}
            <div className="p-6">
                <SuccessMessage
                    show={showSuccess}
                    message="Profile updated successfully!"
                />

                <form onSubmit={handleSubmit} className="space-y-8">
                    {/* Avatar Section */}
                    <div className="bg-gray-50 rounded-xl p-6">
                        <h2 className="text-lg font-semibold text-gray-900 mb-4">Profile Picture</h2>
                        <AvatarUpload
                            currentAvatar={selectedAvatarUrl || profileData.avatar}
                            onAvatarChange={handleAvatarChange}
                            uploading={avatarUploading}
                            user={user}
                        />
                        {errors.avatar && (
                            <div className="mt-4 bg-red-50 border border-red-200 rounded-xl p-3">
                                <div className="flex items-center gap-2">
                                    <ExclamationTriangleIcon className="h-4 w-4 text-red-600" />
                                    <p className="text-red-700 text-sm">{errors.avatar}</p>
                                </div>
                            </div>
                        )}
                    </div>

                    {/* Personal Information */}
                    <div className="bg-gray-50 rounded-xl p-6">
                        <h2 className="text-lg font-semibold text-gray-900 mb-6">Personal Information</h2>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <FormField
                                label="Full Name"
                                name="name"
                                value={formData.name}
                                onChange={handleInputChange}
                                onBlur={handleInputBlur}
                                error={errors.name}
                                placeholder="Enter your full name"
                                required
                            />

                            <FormField
                                label="Phone Number"
                                name="phone"
                                type="tel"
                                value={formData.phone}
                                onChange={handleInputChange}
                                onBlur={handleInputBlur}
                                error={errors.phone}
                                placeholder="99999-99999"
                            />

                            <FormField
                                label="Email Address"
                                name="email"
                                type="email"
                                value={formData.email}
                                onChange={handleInputChange}
                                onBlur={handleInputBlur}
                                error={errors.email}
                                placeholder="your.email@example.com"
                                disabled
                            />
                        </div>

                        {errors.submit && (
                            <div className="mt-4 bg-red-50 border border-red-200 rounded-xl p-4">
                                <div className="flex items-center gap-2">
                                    <ExclamationTriangleIcon className="h-5 w-5 text-red-600" />
                                    <p className="text-red-700">{errors.submit}</p>
                                </div>
                            </div>
                        )}
                    </div>

                    {/* Save Button */}
                    <div className="flex justify-end">
                        <SaveButton
                            loading={loading}
                            hasChanges={hasChanges}
                            onClick={handleSubmit}
                        />
                    </div>
                </form>
            </div>
        </div>
    )
}





















File: /app/account/security/page.js

'use client'

import { useState, useRef, useMemo, useCallback, useEffect, memo } from 'react'
import { useAccountData } from '@/hooks/useAccountData'
import { useUser } from '@/hooks/useUser'
import {
    ShieldCheckIcon,
    EyeIcon,
    KeyIcon,
    CheckCircleIcon,
    ExclamationTriangleIcon
} from '@heroicons/react/24/outline'
import LoadingSpinner from '@/components/ui/LoadingSpinner'

// Memoized Toggle Switch Component
const ToggleSwitch = memo(({ name, label, description, checked, onChange, disabled = false }) => {
    return (
        <div className="flex items-center justify-between py-4">
            <div className="flex-1">
                <label htmlFor={name} className="text-sm font-medium text-gray-900 cursor-pointer">
                    {label}
                </label>
                {description && (
                    <p className="text-xs text-gray-500 mt-1">{description}</p>
                )}
            </div>
            <button
                type="button"
                id={name}
                name={name}
                disabled={disabled}
                onClick={() => onChange(!checked)}
                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-black focus:ring-offset-2 disabled:opacity-50 ${checked ? 'bg-black' : 'bg-gray-200'
                    }`}
            >
                <span
                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${checked ? 'translate-x-6' : 'translate-x-1'
                        }`}
                />
            </button>
        </div>
    )
})
ToggleSwitch.displayName = 'ToggleSwitch'

const CustomRadioButton = memo(({ name, value, label, description, checked, onChange, disabled = false }) => {
    return (
        <label className={`flex items-start space-x-3 cursor-pointer group p-4 rounded-xl border-2 transition-all duration-200 ${checked
                ? 'border-black bg-gray-50'
                : 'border-gray-200 bg-white hover:border-gray-300 hover:bg-gray-50'
            } ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`}>
            <div className="relative mt-0.5">
                <input
                    type="radio"
                    name={name}
                    value={value}
                    checked={checked}
                    onChange={onChange}
                    disabled={disabled}
                    className="sr-only"
                />
                <div className={`w-5 h-5 rounded-full border-2 transition-all duration-200 flex items-center justify-center ${checked
                        ? 'bg-black border-black'
                        : 'bg-white border-gray-300 group-hover:border-gray-400'
                    } ${!disabled && 'group-hover:shadow-sm'}`}>
                    {checked && (
                        <div className="w-2 h-2 bg-white rounded-full"></div>
                    )}
                </div>
            </div>
            <div className="flex-1">
                <span className={`text-sm font-semibold block transition-colors duration-200 ${checked ? 'text-gray-900' : 'text-gray-700'
                    } ${!disabled && 'group-hover:text-gray-900'}`}>
                    {label}
                </span>
                {description && (
                    <span className={`text-xs mt-1 block transition-colors duration-200 ${checked ? 'text-gray-600' : 'text-gray-500'
                        }`}>
                        {description}
                    </span>
                )}
            </div>
        </label>
    )
})
CustomRadioButton.displayName = 'CustomRadioButton'

// Memoized Password Change Form Component
const PasswordChangeForm = memo(({ onSubmit, loading }) => {
    const [passwords, setPasswords] = useState({
        current: '',
        new: '',
        confirm: ''
    })
    const [errors, setErrors] = useState({})

    const handleSubmit = useCallback((e) => {
        e.preventDefault()
        const newErrors = {}

        if (!passwords.current) newErrors.current = 'Current password is required'
        if (!passwords.new) newErrors.new = 'New password is required'
        if (passwords.new.length < 6) newErrors.new = 'Password must be at least 6 characters'
        if (passwords.new !== passwords.confirm) newErrors.confirm = 'Passwords do not match'

        if (Object.keys(newErrors).length > 0) {
            setErrors(newErrors)
            return
        }

        onSubmit(passwords)
        // Reset form on successful submission
        setPasswords({ current: '', new: '', confirm: '' })
        setErrors({})
    }, [passwords, onSubmit])

    const handleInputChange = useCallback((e) => {
        const { name, value } = e.target
        setPasswords(prev => ({ ...prev, [name]: value }))
        if (errors[name]) {
            setErrors(prev => ({ ...prev, [name]: '' }))
        }
    }, [errors])

    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Current Password</label>
                <input
                    type="password"
                    name="current"
                    value={passwords.current}
                    onChange={handleInputChange}
                    className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-black focus:border-black transition-all duration-200 ${errors.current ? 'border-red-300' : 'border-gray-300'
                        }`}
                />
                {errors.current && (
                    <p className="mt-1 text-sm text-red-600">{errors.current}</p>
                )}
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">New Password</label>
                <input
                    type="password"
                    name="new"
                    value={passwords.new}
                    onChange={handleInputChange}
                    className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-black focus:border-black transition-all duration-200 ${errors.new ? 'border-red-300' : 'border-gray-300'
                        }`}
                />
                {errors.new && (
                    <p className="mt-1 text-sm text-red-600">{errors.new}</p>
                )}
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Confirm New Password</label>
                <input
                    type="password"
                    name="confirm"
                    value={passwords.confirm}
                    onChange={handleInputChange}
                    className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-black focus:border-black transition-all duration-200 ${errors.confirm ? 'border-red-300' : 'border-gray-300'
                        }`}
                />
                {errors.confirm && (
                    <p className="mt-1 text-sm text-red-600">{errors.confirm}</p>
                )}
            </div>

            <button
                type="submit"
                disabled={loading}
                className="w-full px-4 py-3 bg-black text-white rounded-xl hover:bg-gray-800 disabled:opacity-50 transition-colors duration-200 flex items-center justify-center gap-2"
            >
                {loading ? (
                    <>
                        <LoadingSpinner size="sm" className="border-white" />
                        Updating Password...
                    </>
                ) : (
                    <>
                        <KeyIcon className="h-4 w-4" />
                        Update Password
                    </>
                )}
            </button>
        </form>
    )
})
PasswordChangeForm.displayName = 'PasswordChangeForm'

// Memoized Success Message Component
const SuccessMessage = memo(({ show, message, onClose }) => {
    useEffect(() => {
        if (show) {
            const timer = setTimeout(onClose, 5000)
            return () => clearTimeout(timer)
        }
    }, [show, onClose])

    if (!show) return null

    return (
        <div className="bg-emerald-50 border border-emerald-200 rounded-xl p-4 mb-6">
            <div className="flex items-center gap-2">
                <CheckCircleIcon className="h-5 w-5 text-emerald-600" />
                <p className="text-emerald-700 font-medium">{message}</p>
            </div>
        </div>
    )
})
SuccessMessage.displayName = 'SuccessMessage'

// Main Security Page Component
export default function SecurityPage() {
    const { user, preferences: userPreferences, updatePreferences, preferencesLoading } = useAccountData()
    const { changePassword } = useUser()

    // Local privacy state
    const [privacy, setPrivacy] = useState({
        showEmail: false,
        profileVisibility: 'public'
    })

    // UI state
    const [loading, setLoading] = useState(false)
    const [passwordLoading, setPasswordLoading] = useState(false)
    const [errors, setErrors] = useState({})
    const [success, setSuccess] = useState({ show: false, message: '' })

    // Initialize privacy settings from user data
    useEffect(() => {
        if (userPreferences?.privacy) {
            setPrivacy(userPreferences.privacy)
        }
    }, [userPreferences])

    // Check if there are unsaved privacy changes
    const hasPrivacyChanges = useMemo(() => {
        if (!userPreferences?.privacy) return false
        return JSON.stringify(privacy) !== JSON.stringify(userPreferences.privacy)
    }, [privacy, userPreferences])

    // Handle privacy setting changes
    const handlePrivacyChange = useCallback((field, value) => {
        setPrivacy(prev => ({
            ...prev,
            [field]: value
        }))
    }, [])

    // Handle save privacy changes
    const handleSavePrivacyChanges = useCallback(async () => {
        setLoading(true)
        setErrors({})

        try {
            const updatedPreferences = {
                ...userPreferences,
                privacy
            }

            const result = await updatePreferences(updatedPreferences)

            if (result.success) {
                setSuccess({ show: true, message: 'Privacy settings updated successfully!' })
            } else {
                setErrors({ privacy: result.error })
            }
        } catch (error) {
            setErrors({ privacy: 'Failed to update privacy settings' })
        } finally {
            setLoading(false)
        }
    }, [privacy, userPreferences, updatePreferences])

    // Handle discard privacy changes
    const handleDiscardPrivacyChanges = useCallback(() => {
        if (userPreferences?.privacy) {
            setPrivacy(userPreferences.privacy)
        }
        setErrors({})
    }, [userPreferences])

    // Handle password change
    const handlePasswordChange = useCallback(async (passwordData) => {
        setPasswordLoading(true)
        setErrors({})

        try {
            const result = await changePassword(passwordData.current, passwordData.new)

            if (result.success) {
                setSuccess({ show: true, message: 'Password updated successfully!' })
            } else {
                setErrors({ password: result.error })
            }
        } catch (error) {
            setErrors({ password: 'Failed to update password' })
        } finally {
            setPasswordLoading(false)
        }
    }, [changePassword])

    if (preferencesLoading) {
        return (
            <div className="h-full flex items-center justify-center">
                <LoadingSpinner size="lg" />
            </div>
        )
    }

    return (
        <div className="h-full w-full">
            {/* Header */}
            <div className="p-6 rounded-xl border-b border-gray-200 bg-white">
                <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                        <ShieldCheckIcon className="h-8 w-8 text-gray-600" />
                        <div>
                            <h1 className="text-2xl font-bold text-gray-900">Security & Privacy</h1>
                            <p className="text-gray-600 mt-1">Manage your account security and privacy settings</p>
                        </div>
                    </div>

                    {/* Unsaved Changes Indicator */}
                    {hasPrivacyChanges && (
                        <div className="text-sm text-amber-600 bg-amber-50 px-3 py-1 rounded-lg border border-amber-200">
                            Unsaved changes
                        </div>
                    )}
                </div>
            </div>

            {/* Content */}
            <div className="p-6 space-y-8">
                <SuccessMessage
                    show={success.show}
                    message={success.message}
                    onClose={() => setSuccess({ show: false, message: '' })}
                />

                {/* Privacy Settings */}
                <div className="bg-gray-50 rounded-xl p-6">
                    <div className="flex items-center gap-2 mb-6">
                        <EyeIcon className="h-5 w-5 text-gray-600" />
                        <h2 className="text-lg font-semibold text-gray-900">Privacy Settings</h2>
                    </div>

                    <div className="space-y-6">
                        <ToggleSwitch
                            name="showEmail"
                            label="Show Email Address"
                            description="Display your email address in your public profile"
                            checked={privacy.showEmail}
                            onChange={(checked) => handlePrivacyChange('showEmail', checked)}
                            disabled={loading}
                        />

                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-4">
                                Profile Visibility
                            </label>
                            <div className="space-y-3">
                                <CustomRadioButton
                                    name="profileVisibility"
                                    value="public"
                                    label="Public Profile"
                                    description="Anyone can view your profile and basic information"
                                    checked={privacy.profileVisibility === 'public'}
                                    onChange={(e) => handlePrivacyChange('profileVisibility', e.target.value)}
                                    disabled={loading}
                                />
                                <CustomRadioButton
                                    name="profileVisibility"
                                    value="private"
                                    label="Private Profile"
                                    description="Only you can view your profile information"
                                    checked={privacy.profileVisibility === 'private'}
                                    onChange={(e) => handlePrivacyChange('profileVisibility', e.target.value)}
                                    disabled={loading}
                                />
                            </div>
                        </div>
                    </div>

                    {/* Privacy Save/Discard Buttons */}
                    {hasPrivacyChanges && (
                        <div className="mt-6 pt-6 border-t border-gray-200">
                            <div className="flex items-center justify-between">
                                <div>
                                    <h3 className="text-sm font-medium text-gray-900">Unsaved Privacy Changes</h3>
                                    <p className="text-xs text-gray-500 mt-1">You have unsaved changes to your privacy settings</p>
                                </div>
                                <div className="flex gap-3">
                                    <button
                                        onClick={handleDiscardPrivacyChanges}
                                        disabled={loading}
                                        className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 disabled:opacity-50 transition-colors duration-200"
                                    >
                                        Discard Changes
                                    </button>
                                    <button
                                        onClick={handleSavePrivacyChanges}
                                        disabled={loading}
                                        className="px-6 py-2 text-sm font-medium text-white bg-black rounded-lg hover:bg-gray-800 disabled:opacity-50 transition-colors duration-200 flex items-center gap-2"
                                    >
                                        {loading ? (
                                            <>
                                                <LoadingSpinner size="sm" className="border-white" />
                                                Saving...
                                            </>
                                        ) : (
                                            <>
                                                <CheckCircleIcon className="h-4 w-4" />
                                                Save Changes
                                            </>
                                        )}
                                    </button>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Privacy Error */}
                    {errors.privacy && (
                        <div className="mt-4 bg-red-50 border border-red-200 rounded-xl p-3">
                            <div className="flex items-center gap-2">
                                <ExclamationTriangleIcon className="h-4 w-4 text-red-600" />
                                <p className="text-red-700 text-sm">{errors.privacy}</p>
                            </div>
                        </div>
                    )}
                </div>

                {/* Password Change */}
                <div className="bg-gray-50 rounded-xl p-6">
                    <div className="flex items-center gap-2 mb-6">
                        <KeyIcon className="h-5 w-5 text-gray-600" />
                        <h2 className="text-lg font-semibold text-gray-900">Change Password</h2>
                    </div>

                    <div className="max-w-md">
                        <p className="text-sm text-gray-600 mb-4">
                            Update your password to keep your account secure. Make sure to use a strong password.
                        </p>
                        <PasswordChangeForm onSubmit={handlePasswordChange} loading={passwordLoading} />
                        {errors.password && (
                            <div className="mt-4 bg-red-50 border border-red-200 rounded-xl p-3">
                                <div className="flex items-center gap-2">
                                    <ExclamationTriangleIcon className="h-4 w-4 text-red-600" />
                                    <p className="text-red-700 text-sm">{errors.password}</p>
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </div>
    )
}





















File: /app/admin/retailer-applications/page.js

'use client'

import { useState, useEffect, memo } from 'react'
import { useRouter } from 'next/navigation'
import { useUser } from '@/hooks/useUser'
import {
    DocumentCheckIcon,
    UserIcon,
    BuildingStorefrontIcon,
    CheckCircleIcon,
    XCircleIcon,
    EyeIcon,
    ClockIcon,
    CalendarIcon
} from '@heroicons/react/24/outline'
import LoadingSpinner from '@/components/ui/LoadingSpinner'

const ApplicationCard = memo(({ application, onApprove, onReject, isProcessing }) => {
    const [showRejectModal, setShowRejectModal] = useState(false)
    const [rejectionReason, setRejectionReason] = useState('')
    const [rejectionError, setRejectionError] = useState('')

    const handleReject = async () => {
        if (!rejectionReason.trim() || rejectionReason.trim().length < 10) {
            setRejectionError('Rejection reason must be at least 10 characters')
            return
        }

        await onReject(application._id, rejectionReason.trim())
        setShowRejectModal(false)
        setRejectionReason('')
        setRejectionError('')
    }

    return (
        <>
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-3">
                        {application.userId?.profile?.avatar ? (
                            <img
                                src={application.userId.profile.avatar}
                                alt={application.userId.profile.name}
                                className="w-10 h-10 rounded-full object-cover"
                            />
                        ) : (
                            <div className="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center">
                                <UserIcon className="h-5 w-5 text-gray-500" />
                            </div>
                        )}
                        <div>
                            <h3 className="font-semibold text-gray-900">
                                {application.userId?.profile?.name || 'Unknown User'}
                            </h3>
                            <p className="text-sm text-gray-500">{application.userId?.email}</p>
                        </div>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-gray-500">
                        <CalendarIcon className="h-4 w-4" />
                        {new Date(application.createdAt).toLocaleDateString()}
                    </div>
                </div>

                <div className="grid md:grid-cols-2 gap-4 mb-6">
                    <div>
                        <h4 className="font-medium text-gray-900 mb-2">Business Information</h4>
                        <div className="space-y-1 text-sm">
                            <p><span className="font-medium">Name:</span> {application.businessName}</p>
                            <p><span className="font-medium">Category:</span> {application.businessCategory}</p>
                        </div>
                    </div>
                    <div>
                        <h4 className="font-medium text-gray-900 mb-2">Application Status</h4>
                        <div className="flex items-center gap-2">
                            <ClockIcon className="h-4 w-4 text-yellow-500" />
                            <span className="text-sm font-medium text-yellow-600 bg-yellow-50 px-2 py-1 rounded">
                                Pending Review
                            </span>
                        </div>
                    </div>
                </div>

                <div className="mb-6">
                    <h4 className="font-medium text-gray-900 mb-2">Business Description</h4>
                    <p className="text-sm text-gray-600 bg-gray-50 p-3 rounded-lg">
                        {application.businessDescription}
                    </p>
                </div>

                <div className="flex items-center justify-between pt-4 border-t border-gray-200">
                    <div className="flex items-center gap-2 text-sm text-gray-500">
                        <EyeIcon className="h-4 w-4" />
                        Applied {new Date(application.createdAt).toLocaleDateString()}
                    </div>
                    <div className="flex items-center gap-3">
                        <button
                            onClick={() => setShowRejectModal(true)}
                            disabled={isProcessing}
                            className="px-4 py-2 text-sm font-medium text-red-600 bg-red-50 rounded-lg hover:bg-red-100 disabled:opacity-50 transition-colors duration-200"
                        >
                            Reject
                        </button>
                        <button
                            onClick={() => onApprove(application._id)}
                            disabled={isProcessing}
                            className="px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-lg hover:bg-green-700 disabled:opacity-50 transition-colors duration-200 flex items-center gap-2"
                        >
                            <CheckCircleIcon className="h-4 w-4" />
                            Approve
                        </button>
                    </div>
                </div>
            </div>

            {/* Rejection Modal */}
            {showRejectModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                    <div className="bg-white rounded-xl max-w-md w-full p-6">
                        <div className="flex items-center gap-3 mb-4">
                            <XCircleIcon className="h-6 w-6 text-red-600" />
                            <h3 className="text-lg font-semibold text-gray-900">Reject Application</h3>
                        </div>
                        <p className="text-gray-600 mb-4">
                            Please provide a reason for rejecting this retailer application.
                        </p>
                        <textarea
                            value={rejectionReason}
                            onChange={(e) => {
                                setRejectionReason(e.target.value)
                                setRejectionError('')
                            }}
                            rows={4}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 resize-none"
                            placeholder="Enter rejection reason (minimum 10 characters)..."
                        />
                        {rejectionError && (
                            <p className="text-sm text-red-600 mt-2">{rejectionError}</p>
                        )}
                        <div className="flex items-center gap-3 mt-4">
                            <button
                                onClick={() => setShowRejectModal(false)}
                                className="flex-1 px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors duration-200"
                            >
                                Cancel
                            </button>
                            <button
                                onClick={handleReject}
                                disabled={isProcessing}
                                className="flex-1 px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-lg hover:bg-red-700 disabled:opacity-50 transition-colors duration-200"
                            >
                                {isProcessing ? 'Rejecting...' : 'Reject Application'}
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </>
    )
})
ApplicationCard.displayName = 'ApplicationCard'

export default function AdminRetailerApplicationsPage() {
    const { user, loading } = useUser()
    const router = useRouter()
    const [applications, setApplications] = useState([])
    const [loadingApplications, setLoadingApplications] = useState(true)
    const [processingId, setProcessingId] = useState(null)
    const [error, setError] = useState('')

    // Redirect if not admin
    useEffect(() => {
        if (!loading && (!user || user.role !== 'Admin')) {
            router.push('/account')
        }
    }, [user, loading, router])

    // Fetch applications
    useEffect(() => {
        const fetchApplications = async () => {
            try {
                const response = await fetch('/api/admin/retailer-applications?status=pending')
                if (response.ok) {
                    const data = await response.json()
                    setApplications(data.applications)
                } else {
                    setError('Failed to fetch applications')
                }
            } catch (error) {
                setError('Error loading applications')
            } finally {
                setLoadingApplications(false)
            }
        }

        if (user && user.role === 'Admin') {
            fetchApplications()
        }
    }, [user])

    const handleApprove = async (applicationId) => {
        setProcessingId(applicationId)
        try {
            const response = await fetch(`/api/admin/retailer-applications/${applicationId}/approve`, {
                method: 'PUT'
            })

            if (response.ok) {
                setApplications(prev => prev.filter(app => app._id !== applicationId))
            } else {
                setError('Failed to approve application')
            }
        } catch (error) {
            setError('Error approving application')
        } finally {
            setProcessingId(null)
        }
    }

    const handleReject = async (applicationId, rejectionReason) => {
        setProcessingId(applicationId)
        try {
            const response = await fetch(`/api/admin/retailer-applications/${applicationId}/reject`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ rejectionReason })
            })

            if (response.ok) {
                setApplications(prev => prev.filter(app => app._id !== applicationId))
            } else {
                setError('Failed to reject application')
            }
        } catch (error) {
            setError('Error rejecting application')
        } finally {
            setProcessingId(null)
        }
    }

    if (loading || loadingApplications) {
        return (
            <div className="h-full flex items-center justify-center">
                <LoadingSpinner size="lg" />
            </div>
        )
    }

    return (
        <div className="h-full w-full">
            {/* Header */}
            <div className="p-6 rounded-xl border-b border-gray-200 bg-white">
                <div className="flex items-center gap-3">
                    <DocumentCheckIcon className="h-8 w-8 text-gray-600" />
                    <div>
                        <h1 className="text-2xl font-bold text-gray-900">Retailer Applications</h1>
                        <p className="text-gray-600 mt-1">Review and approve pending retailer applications</p>
                    </div>
                </div>
            </div>

            {/* Content */}
            <div className="p-6">
                {error && (
                    <div className="bg-red-50 border border-red-200 rounded-xl p-4 mb-6">
                        <p className="text-red-700">{error}</p>
                    </div>
                )}

                {applications.length === 0 ? (
                    <div className="text-center py-12">
                        <BuildingStorefrontIcon className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                        <h3 className="text-lg font-medium text-gray-900 mb-2">No Pending Applications</h3>
                        <p className="text-gray-600">All retailer applications have been processed.</p>
                    </div>
                ) : (
                    <div className="space-y-6">
                        {applications.map(application => (
                            <ApplicationCard
                                key={application._id}
                                application={application}
                                onApprove={handleApprove}
                                onReject={handleReject}
                                isProcessing={processingId === application._id}
                            />
                        ))}
                    </div>
                )}
            </div>
        </div>
    )
}





















File: /app/api/account/addresses/default/route.js

import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import connectDB from '@/lib/mongodb'
import User from '@/models/User'

export async function PUT(request) {
    try {
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        const { addressId } = await request.json()
        await connectDB()

        const mongoUser = await User.findOne({ supabaseId: user.id })
        if (!mongoUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 })
        }

        // Remove default from all addresses
        mongoUser.addresses.forEach(addr => {
            addr.isDefault = false
        })

        // Set new default
        const targetAddress = mongoUser.addresses.id(addressId)
        if (!targetAddress) {
            return NextResponse.json({ error: 'Address not found' }, { status: 404 })
        }

        targetAddress.isDefault = true
        await mongoUser.save()

        return NextResponse.json({ success: true })
    } catch (error) {
        console.error('Default address update error:', error)
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
    }
}





















File: /app/api/account/addresses/route.js

import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import connectDB from '@/lib/mongodb'
import User from '@/models/User'

export async function GET(request) {
    try {
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        await connectDB()
        const mongoUser = await User.findOne({ supabaseId: user.id })

        if (!mongoUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 })
        }

        const addresses = mongoUser.addresses?.filter(addr => addr.isActive) || []

        return NextResponse.json({ addresses })
    } catch (error) {
        console.error('Addresses fetch error:', error)
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
    }
}

export async function POST(request) {
    try {
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        const addressData = await request.json()
        await connectDB()

        const mongoUser = await User.findOne({ supabaseId: user.id })
        if (!mongoUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 })
        }

        // If this is set as default, remove default from others
        if (addressData.isDefault) {
            mongoUser.addresses.forEach(addr => {
                if (addr.isDefault) addr.isDefault = false
            })
        }

        // Create new address
        const newAddress = {
            type: addressData.type,
            label: addressData.label,
            street: addressData.street,
            city: addressData.city,
            state: addressData.state,
            zipCode: addressData.zipCode,
            country: 'India',
            isDefault: addressData.isDefault,
            isActive: true
        }

        mongoUser.addresses.push(newAddress)
        await mongoUser.save()

        return NextResponse.json({ success: true })
    } catch (error) {
        console.error('Address creation error:', error)
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
    }
}





















File: /app/api/account/addresses/[id]/route.js

import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import connectDB from '@/lib/mongodb'
import User from '@/models/User'

export async function PUT(request, { params }) {
    try {
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        const addressData = await request.json()
        await connectDB()

        const mongoUser = await User.findOne({ supabaseId: user.id })
        if (!mongoUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 })
        }

        const address = mongoUser.addresses.id(params.id)
        if (!address) {
            return NextResponse.json({ error: 'Address not found' }, { status: 404 })
        }

        // If this is set as default, remove default from others
        if (addressData.isDefault) {
            mongoUser.addresses.forEach(addr => {
                if (addr._id.toString() !== params.id && addr.isDefault) {
                    addr.isDefault = false
                }
            })
        }

        // Update address
        address.type = addressData.type
        address.label = addressData.label
        address.street = addressData.street
        address.city = addressData.city
        address.state = addressData.state
        address.zipCode = addressData.zipCode
        address.isDefault = addressData.isDefault

        await mongoUser.save()

        return NextResponse.json({ success: true })
    } catch (error) {
        console.error('Address update error:', error)
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
    }
}

export async function DELETE(request, { params }) {
    try {
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        await connectDB()
        const mongoUser = await User.findOne({ supabaseId: user.id })

        if (!mongoUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 })
        }

        const address = mongoUser.addresses.id(params.id)
        if (!address) {
            return NextResponse.json({ error: 'Address not found' }, { status: 404 })
        }

        // Mark as inactive instead of deleting
        address.isActive = false
        await mongoUser.save()

        return NextResponse.json({ success: true })
    } catch (error) {
        console.error('Address deletion error:', error)
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
    }
}





















File: /app/api/account/orders/route.js

import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import connectDB from '@/lib/mongodb'
import Order from '@/models/Order'
import User from '@/models/User'

// GET - Fetch user orders
export async function GET(request) {
    try {
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        await connectDB()

        // Get user from MongoDB to get the ObjectId
        const mongoUser = await User.findOne({ supabaseId: user.id })
        if (!mongoUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 })
        }

        const { searchParams } = new URL(request.url)
        const status = searchParams.get('status')
        const dateRange = searchParams.get('dateRange')
        const search = searchParams.get('search')

        // Build query
        const query = { userId: mongoUser._id }

        if (status) {
            query.status = status
        }

        if (dateRange) {
            const days = parseInt(dateRange)
            const startDate = new Date()
            startDate.setDate(startDate.getDate() - days)
            query['timestamps.orderDate'] = { $gte: startDate }
        }

        if (search) {
            query.$or = [
                { orderNumber: { $regex: search, $options: 'i' } },
                { 'items.name': { $regex: search, $options: 'i' } }
            ]
        }

        const orders = await Order.find(query)
            .sort({ 'timestamps.orderDate': -1 })
            .limit(50)

        return NextResponse.json({ orders })
    } catch (error) {
        console.error('Orders fetch error:', error)
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
    }
}





















File: /app/api/account/orders/[id]/cancel/route.js

import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import connectDB from '@/lib/mongodb'
import Order from '@/models/Order'
import User from '@/models/User'

export async function POST(request, { params }) {
    try {
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        await connectDB()

        const mongoUser = await User.findOne({ supabaseId: user.id })
        if (!mongoUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 })
        }

        const order = await Order.findOne({
            _id: params.id,
            userId: mongoUser._id
        })

        if (!order) {
            return NextResponse.json({ error: 'Order not found' }, { status: 404 })
        }

        // Check if order can be cancelled
        if (!['pending', 'confirmed'].includes(order.status)) {
            return NextResponse.json({
                error: 'Order cannot be cancelled at this stage'
            }, { status: 400 })
        }

        // Update order status
        order.status = 'cancelled'
        await order.save()

        return NextResponse.json({ success: true, order })
    } catch (error) {
        console.error('Order cancel error:', error)
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
    }
}





















File: /app/api/account/orders/[id]/reorder/route.js

import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import connectDB from '@/lib/mongodb'
import Order from '@/models/Order'
import User from '@/models/User'

export async function POST(request, { params }) {
    try {
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        await connectDB()

        const mongoUser = await User.findOne({ supabaseId: user.id })
        if (!mongoUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 })
        }

        const order = await Order.findOne({
            _id: params.id,
            userId: mongoUser._id
        })

        if (!order) {
            return NextResponse.json({ error: 'Order not found' }, { status: 404 })
        }

        // Add items to cart (you'll need to implement cart logic)
        const cartItems = order.items.map(item => ({
            productId: item.productId,
            name: item.name,
            price: item.price,
            quantity: item.quantity,
            size: item.size,
            color: item.color
        }))

        // Here you would add items to the user's cart
        // For now, we'll just return the items

        return NextResponse.json({ success: true, cartItems })
    } catch (error) {
        console.error('Reorder error:', error)
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
    }
}





















File: /app/api/account/orders/[id]/route.js

import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import connectDB from '@/lib/mongodb'
import Order from '@/models/Order'
import User from '@/models/User'

export async function GET(request, { params }) {
    try {
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        await connectDB()

        // Get MongoDB user
        const mongoUser = await User.findOne({ supabaseId: user.id })
        if (!mongoUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 })
        }

        // Find order by ID and ensure it belongs to the user
        const order = await Order.findOne({
            _id: params.id,
            userId: mongoUser._id
        }).lean()

        if (!order) {
            return NextResponse.json({ error: 'Order not found' }, { status: 404 })
        }

        return NextResponse.json({ order })
    } catch (error) {
        console.error('Order details fetch error:', error)
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
    }
}





















File: /app/api/account/preferences/route.js

import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import connectDB from '@/lib/mongodb'
import User from '@/models/User'
import { validatePreferences } from '@/lib/validations/userValidation'

export async function GET(request) {
    try {
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        await connectDB()
        const mongoUser = await User.findOne({ supabaseId: user.id })

        if (!mongoUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 })
        }

        return NextResponse.json({
            preferences: mongoUser.preferences || {
                categories: [],
                priceRange: { min: 0, max: 50000 },
                currency: 'INR',
                notifications: {
                    email: true,
                    push: true,
                    orderUpdates: true,
                    deals: true,
                    newArrivals: false
                },
                privacy: {
                    showEmail: false,
                    profileVisibility: 'public'
                }
            }
        })
    } catch (error) {
        console.error('Preferences fetch error:', error)
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
    }
}

export async function PUT(request) {
    try {
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        const preferencesData = await request.json()

        // Validate preferences data
        const validation = validatePreferences(preferencesData)
        if (!validation.isValid) {
            return NextResponse.json({
                error: 'Invalid preferences data',
                details: validation.errors
            }, { status: 400 })
        }

        await connectDB()
        const mongoUser = await User.findOne({ supabaseId: user.id })

        if (!mongoUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 })
        }

        // Safely merge existing preferences with incoming data
        if (!mongoUser.preferences) {
            mongoUser.preferences = {};
        }

        const mergedPreferences = {
            ...mongoUser.preferences,
            ...preferencesData
        };

        // Ensure privacy object is always present
        if (preferencesData.privacy === undefined) {
            mergedPreferences.privacy = mongoUser.preferences.privacy ?? {
                showEmail: false,
                profileVisibility: 'public'
            };
        }

        mongoUser.preferences = mergedPreferences;

        await mongoUser.save()

        return NextResponse.json({ success: true })
    } catch (error) {
        console.error('Preferences update error:', error)
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
    }
}





















File: /app/api/account/profile/route.js

import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import connectDB from '@/lib/mongodb'
import User from '@/models/User'

// GET - Fetch user profile
export async function GET(request) {
    try {
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        await connectDB()
        const mongoUser = await User.findOne({ supabaseId: user.id })

        if (!mongoUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 })
        }

        const profileData = {
            name: mongoUser.profile?.name || '',
            avatar: mongoUser.profile?.avatar || '',
            phone: mongoUser.profile?.phone || '',
            email: mongoUser.email
        }

        return NextResponse.json({ profile: profileData })
    } catch (error) {
        console.error('Profile fetch error:', error)
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
    }
}

// PUT - Update user profile
export async function PUT(request) {
    try {
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        const updates = await request.json()
        await connectDB()

        const updateData = {}

        if (updates.profile) {
            updateData.profile = {}

            if (updates.profile.name !== undefined) {
                updateData.profile.name = updates.profile.name.trim()
            }

            if (updates.profile.phone !== undefined) {
                updateData.profile.phone = updates.profile.phone.trim()
            }

            if (updates.profile.avatar !== undefined) {
                updateData.profile.avatar = updates.profile.avatar
            }
        }

        const updatedUser = await User.findOneAndUpdate(
            { supabaseId: user.id },
            { $set: updateData },
            { new: true, runValidators: true }
        )

        if (!updatedUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 })
        }

        return NextResponse.json({
            success: true,
            profile: {
                name: updatedUser.profile?.name || '',
                avatar: updatedUser.profile?.avatar || '',
                phone: updatedUser.profile?.phone || '',
                email: updatedUser.email
            }
        })
    } catch (error) {
        console.error('Profile update error:', error)

        if (error.name === 'ValidationError') {
            return NextResponse.json({
                error: 'Validation failed',
                details: error.message
            }, { status: 400 })
        }

        return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
    }
}





















File: /app/api/account/security/password/route.js

import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'

export async function POST(request) {
    try {
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        const { currentPassword, newPassword } = await request.json()

        // Validate input
        if (!currentPassword || !newPassword) {
            return NextResponse.json({
                error: 'Current password and new password are required'
            }, { status: 400 })
        }

        if (newPassword.length < 6) {
            return NextResponse.json({
                error: 'New password must be at least 6 characters long'
            }, { status: 400 })
        }

        // Verify current password by attempting to sign in
        const { error: signInError } = await supabase.auth.signInWithPassword({
            email: user.email,
            password: currentPassword
        })

        if (signInError) {
            return NextResponse.json({
                error: 'Current password is incorrect'
            }, { status: 400 })
        }

        // Update password
        const { error: updateError } = await supabase.auth.updateUser({
            password: newPassword
        })

        if (updateError) {
            return NextResponse.json({
                error: 'Failed to update password'
            }, { status: 500 })
        }

        return NextResponse.json({ success: true })
    } catch (error) {
        console.error('Password update error:', error)
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
    }
}





















File: /app/api/admin/retailer-applications/route.js

import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import connectDB from '@/lib/mongodb'
import User from '@/models/User'
import RetailerApplication from '@/models/RetailerApplication'

export async function GET(request) {
    try {
        // Verify user authentication
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        // Connect to database
        await connectDB()

        // Get user from MongoDB and verify admin role
        const mongoUser = await User.findOne({ supabaseId: user.id })
        if (!mongoUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 })
        }

        if (mongoUser.role !== 'Admin') {
            return NextResponse.json({ error: 'Access denied. Admin role required.' }, { status: 403 })
        }

        // Get query parameters
        const { searchParams } = new URL(request.url)
        const status = searchParams.get('status') || 'pending'

        // Fetch applications with user details
        const applications = await RetailerApplication.find({ status })
            .populate('userId', 'email profile.name profile.avatar')
            .sort({ createdAt: -1 })

        return NextResponse.json({
            applications,
            total: applications.length
        }, { status: 200 })

    } catch (error) {
        console.error('Admin retailer applications fetch error:', error)
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
    }
}





















File: /app/api/admin/retailer-applications/[id]/approve/route.js

import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import connectDB from '@/lib/mongodb'
import User from '@/models/User'
import RetailerApplication from '@/models/RetailerApplication'

export async function PUT(request, { params }) {
    try {
        // Verify user authentication
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        // Connect to database
        await connectDB()

        // Get admin user from MongoDB and verify role
        const adminUser = await User.findOne({ supabaseId: user.id })
        if (!adminUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 })
        }

        if (adminUser.role !== 'Admin') {
            return NextResponse.json({ error: 'Access denied. Admin role required.' }, { status: 403 })
        }

        const { id } = params

        // Find the application
        const application = await RetailerApplication.findById(id)
        if (!application) {
            return NextResponse.json({ error: 'Application not found' }, { status: 404 })
        }

        if (application.status !== 'pending') {
            return NextResponse.json({ error: 'Application has already been processed' }, { status: 400 })
        }

        // Update application status
        const updatedApplication = await RetailerApplication.findByIdAndUpdate(
            id,
            {
                status: 'approved',
                reviewedBy: adminUser._id,
                reviewedAt: new Date()
            },
            { new: true }
        )

        // Update user role and retailer verification
        await User.findByIdAndUpdate(application.userId, {
            role: 'Retailer',
            'retailerVerification.status': 'approved',
            'retailerVerification.verifiedAt': new Date(),
            'retailerVerification.verifiedBy': adminUser._id.toString()
        })

        return NextResponse.json({
            success: true,
            message: 'Retailer application approved successfully',
            application: updatedApplication
        }, { status: 200 })

    } catch (error) {
        console.error('Admin approve application error:', error)
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
    }
}





















File: /app/api/admin/retailer-applications/[id]/reject/route.js

import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import connectDB from '@/lib/mongodb'
import User from '@/models/User'
import RetailerApplication from '@/models/RetailerApplication'

export async function PUT(request, { params }) {
    try {
        // Verify user authentication
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        // Connect to database
        await connectDB()

        // Get admin user from MongoDB and verify role
        const adminUser = await User.findOne({ supabaseId: user.id })
        if (!adminUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 })
        }

        if (adminUser.role !== 'Admin') {
            return NextResponse.json({ error: 'Access denied. Admin role required.' }, { status: 403 })
        }

        const { id } = params
        const { rejectionReason } = await request.json()

        // Validate rejection reason
        if (!rejectionReason || rejectionReason.trim().length < 10) {
            return NextResponse.json({
                error: 'Rejection reason is required (minimum 10 characters)'
            }, { status: 400 })
        }

        // Find the application
        const application = await RetailerApplication.findById(id)
        if (!application) {
            return NextResponse.json({ error: 'Application not found' }, { status: 404 })
        }

        if (application.status !== 'pending') {
            return NextResponse.json({ error: 'Application has already been processed' }, { status: 400 })
        }

        // Update application status
        const updatedApplication = await RetailerApplication.findByIdAndUpdate(
            id,
            {
                status: 'rejected',
                reviewedBy: adminUser._id,
                reviewedAt: new Date(),
                rejectionReason: rejectionReason.trim()
            },
            { new: true }
        )

        // Update user retailer verification status
        await User.findByIdAndUpdate(application.userId, {
            'retailerVerification.status': 'rejected',
            'retailerVerification.verifiedAt': new Date(),
            'retailerVerification.verifiedBy': adminUser._id.toString()
        })

        return NextResponse.json({
            success: true,
            message: 'Retailer application rejected',
            application: updatedApplication
        }, { status: 200 })

    } catch (error) {
        console.error('Admin reject application error:', error)
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
    }
}





















File: /app/api/retailer/application-status/route.js

import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import connectDB from '@/lib/mongodb'
import User from '@/models/User'
import RetailerApplication from '@/models/RetailerApplication'

export async function GET(request) {
    try {
        // Verify user authentication
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        // Connect to database
        await connectDB()

        // Get user from MongoDB
        const mongoUser = await User.findOne({ supabaseId: user.id })
        if (!mongoUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 })
        }

        // Find retailer application for user
        const application = await RetailerApplication.findOne({ userId: mongoUser._id })

        return NextResponse.json({ application }, { status: 200 })
    } catch (error) {
        console.error('Retailer application status error:', error)
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
    }
}





















File: /app/api/retailer/apply/route.js

import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import connectDB from '@/lib/mongodb'
import User from '@/models/User'
import RetailerApplication from '@/models/RetailerApplication'

export async function POST(request) {
    try {
        // Verify user authentication
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        // Connect to database
        await connectDB()

        // Get user from MongoDB
        const mongoUser = await User.findOne({ supabaseId: user.id })
        if (!mongoUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 })
        }

        // Check if user is already a retailer
        if (mongoUser.role === 'Retailer') {
            return NextResponse.json({ error: 'You are already a retailer' }, { status: 400 })
        }

        // Check if user already has a pending application
        const existingApplication = await RetailerApplication.findOne({
            userId: mongoUser._id,
            status: 'pending'
        })

        if (existingApplication) {
            return NextResponse.json({
                error: 'You already have a pending application'
            }, { status: 400 })
        }

        // Get request data
        const { businessName, businessDescription, businessCategory } = await request.json()

        // Validate required fields
        if (!businessName || !businessDescription || !businessCategory) {
            return NextResponse.json({
                error: 'All fields are required'
            }, { status: 400 })
        }

        // Validate business name length
        if (businessName.trim().length < 2) {
            return NextResponse.json({
                error: 'Business name must be at least 2 characters'
            }, { status: 400 })
        }

        // Validate business description length
        if (businessDescription.trim().length < 20) {
            return NextResponse.json({
                error: 'Business description must be at least 20 characters'
            }, { status: 400 })
        }

        // Validate business category
        const validCategories = ['Electronics', 'Clothing', 'Home & Garden', 'Books', 'Sports', 'Beauty', 'Food', 'Other']
        if (!validCategories.includes(businessCategory)) {
            return NextResponse.json({
                error: 'Invalid business category'
            }, { status: 400 })
        }

        // Create retailer application
        const application = await RetailerApplication.create({
            userId: mongoUser._id,
            status: 'pending',
            businessName: businessName.trim(),
            businessDescription: businessDescription.trim(),
            businessCategory,
            reviewedBy: null,
            reviewedAt: null,
            rejectionReason: ''
        })

        // Update user's retailer verification status
        await User.findByIdAndUpdate(mongoUser._id, {
            'retailerVerification.status': 'pending',
            'retailerVerification.appliedAt': new Date()
        })

        return NextResponse.json({
            success: true,
            message: 'Retailer application submitted successfully',
            application: {
                _id: application._id,
                status: application.status,
                businessName: application.businessName,
                businessDescription: application.businessDescription,
                businessCategory: application.businessCategory,
                createdAt: application.createdAt,
                reviewedBy: application.reviewedBy,
                reviewedAt: application.reviewedAt,
                rejectionReason: application.rejectionReason
            }
        }, { status: 201 })

    } catch (error) {
        console.error('Retailer application error:', error)

        // Handle validation errors
        if (error.name === 'ValidationError') {
            return NextResponse.json({
                error: 'Validation failed',
                details: error.message
            }, { status: 400 })
        }

        // Handle duplicate key errors
        if (error.code === 11000) {
            return NextResponse.json({
                error: 'Application already exists'
            }, { status: 409 })
        }

        return NextResponse.json({
            error: 'Internal server error'
        }, { status: 500 })
    }
}





















File: /app/api/upload/profile-picture/route.js

import { NextResponse } from 'next/server'
import { v2 as cloudinary } from 'cloudinary'
import { createClient } from '@/lib/supabase/server'

// Configure Cloudinary
cloudinary.config({
    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
    api_key: process.env.CLOUDINARY_API_KEY,
    api_secret: process.env.CLOUDINARY_API_SECRET,
})

export async function POST(request) {
    try {
        // Verify user authentication
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        const formData = await request.formData()
        const file = formData.get('file')

        if (!file) {
            return NextResponse.json({ error: 'No file provided' }, { status: 400 })
        }

        // Convert file to buffer
        const bytes = await file.arrayBuffer()
        const buffer = Buffer.from(bytes)

        // Upload to Cloudinary with the preset we created
        const uploadResponse = await new Promise((resolve, reject) => {
            cloudinary.uploader.upload_stream(
                {
                    resource_type: 'auto',
                    folder: 'profile-pictures',
                    public_id: `profile_${user.id}_${Date.now()}`,
                    transformation: [
                        { width: 400, height: 400, crop: 'limit' },
                        { quality: 'auto', fetch_format: 'auto' }
                    ],
                    overwrite: false, // Security: don't overwrite existing
                },
                (error, result) => {
                    if (error) reject(error)
                    else resolve(result)
                }
            ).end(buffer)
        })

        return NextResponse.json({
            success: true,
            url: uploadResponse.secure_url,
            public_id: uploadResponse.public_id,
            width: uploadResponse.width,
            height: uploadResponse.height,
        })
    } catch (error) {
        console.error('Upload error:', error)
        return NextResponse.json(
            { error: 'Upload failed', details: error.message },
            { status: 500 }
        )
    }
}





















File: /app/api/user/sync/route.js

import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import connectDB from '@/lib/mongodb'
import User from '@/models/User'

export async function POST(req) {
    try {
        // Check if user is authenticated
        const supabase = await createClient()
        const { data: { user }, error } = await supabase.auth.getUser()

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        // Connect to database
        await connectDB()

        // Check if user exists in MongoDB
        let mongoUser = await User.findOne({ supabaseId: user.id })

        if (!mongoUser) {
            // NEW USER: Create with Supabase data as initial values
            mongoUser = await User.create({
                supabaseId: user.id,
                email: user.email,
                name: user.user_metadata?.full_name || user.email.split('@')[0],
                avatar: user.user_metadata?.avatar_url || '',
                profile: {
                    name: user.user_metadata?.full_name || user.email.split('@')[0],
                    avatar: user.user_metadata?.avatar_url || '',
                    phone: ''
                },
                role: 'Buyer', // Default role for shopping app
                addresses: [],
                preferences: {
                    categories: [],
                    priceRange: { min: 0, max: 1000 },
                    currency: 'USD',
                    notifications: {
                        email: true,
                        push: true,
                        orderUpdates: true,
                        deals: true,
                        newArrivals: false,
                    },
                    privacy: {
                        showEmail: false,
                        profileVisibility: 'public',
                    }
                },
                searchHistory: [],
                retailerVerification: {
                    status: 'none',
                    appliedAt: null,
                    verifiedAt: null,
                    verifiedBy: null
                },
                adminPermissions: {
                    grantedAt: null,
                    grantedBy: null,
                    permissions: []
                },
                viewedProducts: [],
                wishlist: [],
                cart: [],
                orders: [],
                reviews: [],
                lastActive: new Date(),
                // Track whether profile fields have been manually edited
                profileEditedFields: {
                    name: false,
                    avatar: false,
                    preferences: false
                }
            })
        } else {
            // EXISTING USER: Only sync essential auth data, preserve profile edits
            const updateData = {
                lastActive: new Date(),
            }

            // ONLY sync email (auth-critical data)
            if (user.email && user.email !== mongoUser.email) {
                updateData.email = user.email
            }

            // CONDITIONALLY sync name and avatar ONLY if user hasn't edited them
            if (!mongoUser.profileEditedFields?.name &&
                user.user_metadata?.full_name &&
                user.user_metadata.full_name !== mongoUser.name) {
                // Update both root-level and nested profile name to keep data in sync
                updateData.name = user.user_metadata.full_name
                updateData["profile.name"] = user.user_metadata.full_name
            }

            if (!mongoUser.profileEditedFields?.avatar &&
                user.user_metadata?.avatar_url &&
                user.user_metadata.avatar_url !== mongoUser.avatar) {
                // Update both root-level and nested profile avatar to keep data in sync
                updateData.avatar = user.user_metadata.avatar_url
                updateData["profile.avatar"] = user.user_metadata.avatar_url
            }

            // Initialize missing fields for existing users (one-time migration)
            if (!mongoUser.preferences) {
                updateData.preferences = {
                    categories: [],
                    priceRange: { min: 0, max: 1000 },
                    currency: 'USD',
                    notifications: {
                        email: true,
                        push: true,
                        orderUpdates: true,
                        deals: true,
                        newArrivals: false,
                    },
                    privacy: {
                        showEmail: false,
                        profileVisibility: 'public',
                    }
                }
            }

            if (!mongoUser.searchHistory) {
                updateData.searchHistory = []
            }

            if (!mongoUser.viewedProducts) {
                updateData.viewedProducts = []
            }

            if (!mongoUser.wishlist) {
                updateData.wishlist = []
            }

            if (!mongoUser.cart) {
                updateData.cart = []
            }

            if (!mongoUser.orders) {
                updateData.orders = []
            }

            if (!mongoUser.reviews) {
                updateData.reviews = []
            }

            // Initialize retailerVerification for existing users
            if (!mongoUser.retailerVerification) {
                updateData.retailerVerification = {
                    status: 'none',
                    appliedAt: null,
                    verifiedAt: null,
                    verifiedBy: null
                }
            }

            // Initialize adminPermissions for existing users
            if (!mongoUser.adminPermissions) {
                updateData.adminPermissions = {
                    grantedAt: null,
                    grantedBy: null,
                    permissions: []
                }
            }

            // Initialize profileEditedFields for existing users
            if (!mongoUser.profileEditedFields) {
                updateData.profileEditedFields = {
                    name: false,
                    avatar: false,
                    preferences: false
                }
            }

            mongoUser = await User.findByIdAndUpdate(
                mongoUser._id,
                updateData,
                { new: true, runValidators: true }
            )
        }

        // Return safe user data for shopping app
        const safeUserData = {
            _id: mongoUser._id,
            supabaseId: mongoUser.supabaseId,
            email: mongoUser.email,
            name: mongoUser.name,
            avatar: mongoUser.avatar,
            role: mongoUser.role,
            profile: mongoUser.profile,
            addresses: mongoUser.addresses,
            preferences: mongoUser.preferences,
            searchHistory: mongoUser.searchHistory,
            viewedProducts: mongoUser.viewedProducts,
            wishlist: mongoUser.wishlist,
            cart: mongoUser.cart,
            orders: mongoUser.orders,
            reviews: mongoUser.reviews,
            retailerVerification: mongoUser.retailerVerification,
            adminPermissions: mongoUser.adminPermissions,
            createdAt: mongoUser.createdAt,
            lastActive: mongoUser.lastActive,
        }

        return NextResponse.json({ user: safeUserData }, { status: 200 })
    } catch (error) {
        console.error('User sync error:', error)

        // Handle validation errors
        if (error.name === 'ValidationError') {
            return NextResponse.json({
                error: 'User data validation failed',
                details: error.message
            }, { status: 400 })
        }

        // Handle duplicate key errors
        if (error.code === 11000) {
            return NextResponse.json({
                error: 'User already exists with this email or Supabase ID'
            }, { status: 409 })
        }

        return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
    }
}





















File: /app/layout.js

import { Lato } from "next/font/google";
import "./globals.css";
import NavbarWrapper from "@/utils/navbar-wrapper";
import ReduxProvider from "@/utils/redux-provider";

const lato = Lato({
    variable: "--font-lato",
    subsets: ["latin"],
    weight: ["100", "300", "400", "700", "900"],
});

export const metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
};

export default function RootLayout({ children }) {
    return (
        <html lang="en">
            <body
                className={`${lato.variable} antialiased`}
            >
                <ReduxProvider>
                    <NavbarWrapper />
                    {children}
                </ReduxProvider>
            </body>
        </html>
    );
}





















File: /app/login/page.js

'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import Link from 'next/link'
import { useUser } from '@/hooks/useUser'
import { EyeIcon, EyeSlashIcon, ArrowLeftIcon } from '@heroicons/react/24/outline'

export default function LoginPage() {
    const [isLogin, setIsLogin] = useState(true)
    const [formData, setFormData] = useState({
        email: '',
        password: '',
        confirmPassword: ''
    })
    const [showPassword, setShowPassword] = useState(false)
    const [showConfirmPassword, setShowConfirmPassword] = useState(false)
    const [errors, setErrors] = useState({})
    const [isSubmitting, setIsSubmitting] = useState(false)

    const { user, loading, error, signIn, signUp } = useUser()
    const router = useRouter()

    // Redirect if already logged in
    useEffect(() => {
        if (!loading && user) {
            router.push('/')
        }
    }, [user, loading, router])

    const validateForm = () => {
        const newErrors = {}

        if (!formData.email) {
            newErrors.email = 'Email is required'
        } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
            newErrors.email = 'Email is invalid'
        }

        if (!formData.password) {
            newErrors.password = 'Password is required'
        } else if (formData.password.length < 6) {
            newErrors.password = 'Password must be at least 6 characters'
        }

        if (!isLogin && !formData.confirmPassword) {
            newErrors.confirmPassword = 'Please confirm your password'
        } else if (!isLogin && formData.password !== formData.confirmPassword) {
            newErrors.confirmPassword = 'Passwords do not match'
        }

        setErrors(newErrors)
        return Object.keys(newErrors).length === 0
    }

    const handleSubmit = async (e) => {
        e.preventDefault()

        if (!validateForm()) return

        setIsSubmitting(true)
        setErrors({})

        try {
            let result
            if (isLogin) {
                result = await signIn(formData.email, formData.password)
            } else {
                result = await signUp(formData.email, formData.password)
            }

            if (result.error) {
                setErrors({ submit: result.error.message })
            } else {
                if (!isLogin) {
                    setErrors({ submit: 'Check your email to confirm your account!' })
                }
                // User will be redirected by the useEffect above
            }
        } catch (error) {
            setErrors({ submit: 'An unexpected error occurred' })
        } finally {
            setIsSubmitting(false)
        }
    }

    const handleInputChange = (e) => {
        const { name, value } = e.target
        setFormData(prev => ({
            ...prev,
            [name]: value
        }))
        // Clear error when user starts typing
        if (errors[name]) {
            setErrors(prev => ({
                ...prev,
                [name]: ''
            }))
        }
    }

    if (loading) {
        return (
            <div className="min-h-screen flex items-center justify-center bg-gray-50">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-black"></div>
            </div>
        )
    }

    return (
        <div className="min-h-screen bg-gray-50">
            {/* Back to Home - Moved to Top */}
            <div className="w-full px-6 lg:px-12 py-4">
                <div className="max-w-8xl mx-auto">
                    <Link
                        href="/"
                        className="inline-flex items-center text-sm font-medium text-black hover:text-gray-600 transition-colors duration-200"
                    >
                        <ArrowLeftIcon className="h-4 w-4 mr-2" />
                        Back to home
                    </Link>
                </div>
            </div>

            <div className="flex flex-col justify-center py-4 sm:px-6 lg:px-8">
                <div className="sm:mx-auto sm:w-full sm:max-w-md">
                    {/* Brand Header - Made Larger */}
                    <div className="text-center mb-6">
                        <Link href="/" className="inline-block">
                            <h1 className="text-3xl font-bold text-black tracking-wide hover:text-gray-700 transition-colors duration-200">
                                WALMART
                            </h1>
                        </Link>
                        <p className="mt-2 text-sm text-gray-600">Save money. Live better.</p>
                    </div>

                    {/* Sign In Header - Made Smaller */}
                    <h2 className="text-center text-xl font-semibold text-black mb-4">
                        {isLogin ? 'Sign in to your account' : 'Create your account'}
                    </h2>
                </div>

                <div className="sm:mx-auto sm:w-full sm:max-w-md">
                    {/* Reduced Padding on Form Container */}
                    <div className="bg-white py-6 px-4 shadow-sm sm:rounded-xl sm:px-6 border border-gray-200">
                        {error && (
                            <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-xl">
                                <p className="text-sm text-red-700">{error}</p>
                            </div>
                        )}

                        <form className="space-y-5" onSubmit={handleSubmit}>
                            {/* Email Field */}
                            <div>
                                <label htmlFor="email" className="block text-sm font-medium text-black mb-2">
                                    Email address
                                </label>
                                <input
                                    id="email"
                                    name="email"
                                    type="email"
                                    autoComplete="email"
                                    required
                                    value={formData.email}
                                    onChange={handleInputChange}
                                    className={`w-full px-4 py-3 text-sm border-2 rounded-xl bg-white text-black placeholder:text-gray-500 focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200 ${errors.email ? 'border-red-300' : 'border-gray-300'
                                        }`}
                                    placeholder="Enter your email"
                                />
                                {errors.email && (
                                    <p className="mt-2 text-sm text-red-600">{errors.email}</p>
                                )}
                            </div>

                            {/* Password Field */}
                            <div>
                                <label htmlFor="password" className="block text-sm font-medium text-black mb-2">
                                    Password
                                </label>
                                <div className="relative">
                                    <input
                                        id="password"
                                        name="password"
                                        type={showPassword ? 'text' : 'password'}
                                        autoComplete={isLogin ? 'current-password' : 'new-password'}
                                        required
                                        value={formData.password}
                                        onChange={handleInputChange}
                                        className={`w-full px-4 py-3 pr-12 text-sm border-2 rounded-xl bg-white text-black placeholder:text-gray-500 focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200 ${errors.password ? 'border-red-300' : 'border-gray-300'
                                            }`}
                                        placeholder="Enter your password"
                                    />
                                    <button
                                        type="button"
                                        className="absolute inset-y-0 right-0 pr-4 flex items-center"
                                        onClick={() => setShowPassword(!showPassword)}
                                    >
                                        {showPassword ? (
                                            <EyeSlashIcon className="h-5 w-5 text-gray-600 hover:text-black transition-colors duration-200" />
                                        ) : (
                                            <EyeIcon className="h-5 w-5 text-gray-600 hover:text-black transition-colors duration-200" />
                                        )}
                                    </button>
                                </div>
                                {errors.password && (
                                    <p className="mt-2 text-sm text-red-600">{errors.password}</p>
                                )}
                            </div>

                            {/* Confirm Password Field (Sign Up Only) */}
                            {!isLogin && (
                                <div>
                                    <label htmlFor="confirmPassword" className="block text-sm font-medium text-black mb-2">
                                        Confirm Password
                                    </label>
                                    <div className="relative">
                                        <input
                                            id="confirmPassword"
                                            name="confirmPassword"
                                            type={showConfirmPassword ? 'text' : 'password'}
                                            autoComplete="new-password"
                                            required
                                            value={formData.confirmPassword}
                                            onChange={handleInputChange}
                                            className={`w-full px-4 py-3 pr-12 text-sm border-2 rounded-xl bg-white text-black placeholder:text-gray-500 focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200 ${errors.confirmPassword ? 'border-red-300' : 'border-gray-300'
                                                }`}
                                            placeholder="Confirm your password"
                                        />
                                        <button
                                            type="button"
                                            className="absolute inset-y-0 right-0 pr-4 flex items-center"
                                            onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                                        >
                                            {showConfirmPassword ? (
                                                <EyeSlashIcon className="h-5 w-5 text-gray-600 hover:text-black transition-colors duration-200" />
                                            ) : (
                                                <EyeIcon className="h-5 w-5 text-gray-600 hover:text-black transition-colors duration-200" />
                                            )}
                                        </button>
                                    </div>
                                    {errors.confirmPassword && (
                                        <p className="mt-2 text-sm text-red-600">{errors.confirmPassword}</p>
                                    )}
                                </div>
                            )}

                            {/* Submit Error */}
                            {errors.submit && (
                                <div className={`p-3 rounded-xl ${errors.submit.includes('email') ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'
                                    }`}>
                                    <p className={`text-sm ${errors.submit.includes('email') ? 'text-green-700' : 'text-red-700'
                                        }`}>
                                        {errors.submit}
                                    </p>
                                </div>
                            )}

                            {/* Submit Button */}
                            <div>
                                <button
                                    type="submit"
                                    disabled={isSubmitting}
                                    className="w-full flex justify-center py-3 px-6 border-2 border-transparent rounded-full text-sm font-medium text-white bg-black hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
                                >
                                    {isSubmitting ? (
                                        <div className="flex items-center">
                                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                                            {isLogin ? 'Signing in...' : 'Creating account...'}
                                        </div>
                                    ) : (
                                        isLogin ? 'Sign in' : 'Create account'
                                    )}
                                </button>
                            </div>

                            {/* Toggle Auth Mode - Moved Under Button */}
                            <div className="text-center">
                                <p className="text-sm text-gray-600">
                                    {isLogin ? "Don't have an account? " : "Already have an account? "}
                                    <button
                                        type="button"
                                        onClick={() => {
                                            setIsLogin(!isLogin)
                                            setFormData({ email: '', password: '', confirmPassword: '' })
                                            setErrors({})
                                        }}
                                        className="font-medium text-black hover:text-gray-600 transition-colors duration-200"
                                    >
                                        {isLogin ? 'Sign up here' : 'Sign in here'}
                                    </button>
                                </p>
                            </div>
                        </form>
                    </div>

                    {/* Trust Indicators */}
                    <div className="mt-6 text-center">
                        <div className="flex justify-center items-center space-x-6 text-sm text-gray-500">
                            <div className="flex items-center">
                                <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                                Secure checkout
                            </div>
                            <div className="flex items-center">
                                <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                                Data protection
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}





















File: /app/page.js

import HeroSection from "@/components/HeroSection";
import ForYouSection from "@/components/ForYouSection";
import PopularProductsSection from "@/components/PopularProductsSection";

export default function Home() {
    return (
        <div>
            <HeroSection />
            <ForYouSection />
            <PopularProductsSection />
        </div>
    );
}





















File: /app/retailer/dashboard/page.js

'use client'

import { useState, useEffect, memo } from 'react'
import { useRouter } from 'next/navigation'
import { useUser } from '@/hooks/useUser'
import {
    ChartBarIcon,
    CubeIcon,
    BuildingStorefrontIcon,
    ShoppingBagIcon,
    EyeIcon,
    PlusIcon,
    ArrowTrendingUpIcon,
    ClockIcon
} from '@heroicons/react/24/outline'
import LoadingSpinner from '@/components/ui/LoadingSpinner'
import Link from 'next/link'

const StatCard = memo(({ title, value, icon: Icon, color = 'gray', change = null }) => {
    const colorClasses = {
        blue: 'bg-blue-50 text-blue-600',
        green: 'bg-green-50 text-green-600',
        yellow: 'bg-yellow-50 text-yellow-600',
        gray: 'bg-gray-50 text-gray-600'
    }

    return (
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <div className="flex items-center justify-between">
                <div>
                    <p className="text-sm font-medium text-gray-600">{title}</p>
                    <p className="text-2xl font-bold text-gray-900 mt-1">{value}</p>
                    {change && (
                        <div className="flex items-center mt-2">
                            <ArrowTrendingUpIcon className="h-4 w-4 text-green-500 mr-1" />
                            <span className="text-sm text-green-600">{change}</span>
                        </div>
                    )}
                </div>
                <div className={`p-3 rounded-xl ${colorClasses[color]}`}>
                    <Icon className="h-6 w-6" />
                </div>
            </div>
        </div>
    )
})
StatCard.displayName = 'StatCard'

const QuickAction = memo(({ title, description, icon: Icon, href, color = 'gray' }) => {
    const colorClasses = {
        blue: 'bg-blue-50 text-blue-600 hover:bg-blue-100',
        green: 'bg-green-50 text-green-600 hover:bg-green-100',
        yellow: 'bg-yellow-50 text-yellow-600 hover:bg-yellow-100',
        gray: 'bg-gray-50 text-gray-600 hover:bg-gray-100'
    }

    return (
        <Link href={href} className="block">
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow duration-200">
                <div className="flex items-center gap-4">
                    <div className={`p-3 rounded-xl ${colorClasses[color]} transition-colors duration-200`}>
                        <Icon className="h-6 w-6" />
                    </div>
                    <div className="flex-1">
                        <h3 className="text-lg font-semibold text-gray-900">{title}</h3>
                        <p className="text-sm text-gray-600 mt-1">{description}</p>
                    </div>
                </div>
            </div>
        </Link>
    )
})
QuickAction.displayName = 'QuickAction'

const RecentActivity = memo(({ activities }) => {
    if (activities.length === 0) {
        return (
            <div className="text-center py-8">
                <ClockIcon className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                <p className="text-gray-600">No recent activity</p>
            </div>
        )
    }

    return (
        <div className="space-y-4">
            {activities.map((activity, index) => (
                <div key={index} className="flex items-center gap-3 p-3 rounded-lg bg-gray-50">
                    <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                    <div className="flex-1">
                        <p className="text-sm text-gray-900">{activity.message}</p>
                        <p className="text-xs text-gray-500 mt-1">{activity.time}</p>
                    </div>
                </div>
            ))}
        </div>
    )
})
RecentActivity.displayName = 'RecentActivity'

export default function RetailerDashboardPage() {
    const { user, loading } = useUser()
    const router = useRouter()
    const [dashboardData, setDashboardData] = useState({
        stats: {
            totalProducts: 0,
            activeProducts: 0,
            totalViews: 0,
            draftProducts: 0
        },
        recentActivity: []
    })
    const [loadingData, setLoadingData] = useState(true)

    // Redirect if not retailer
    useEffect(() => {
        if (!loading && (!user || user.role !== 'Retailer')) {
            router.push('/account')
        }
    }, [user, loading, router])

    // Fetch dashboard data
    useEffect(() => {
        const fetchDashboardData = async () => {
            try {
                // For demo purposes, we'll simulate data
                // In real implementation, this would fetch from APIs
                setTimeout(() => {
                    setDashboardData({
                        stats: {
                            totalProducts: 0,
                            activeProducts: 0,
                            totalViews: 0,
                            draftProducts: 0
                        },
                        recentActivity: [
                            {
                                message: "Welcome to your retailer dashboard!",
                                time: "Just now"
                            },
                            {
                                message: "Your retailer application was approved",
                                time: new Date().toLocaleTimeString()
                            }
                        ]
                    })
                    setLoadingData(false)
                }, 1000)
            } catch (error) {
                console.error('Error fetching dashboard data:', error)
                setLoadingData(false)
            }
        }

        if (user && user.role === 'Retailer') {
            fetchDashboardData()
        }
    }, [user])

    if (loading || loadingData) {
        return (
            <div className="h-full flex items-center justify-center">
                <LoadingSpinner size="lg" />
            </div>
        )
    }

    return (
        <div className="h-full w-full">
            {/* Header */}
            <div className="p-6 rounded-xl border-b border-gray-200 bg-white">
                <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                        <ChartBarIcon className="h-8 w-8 text-gray-600" />
                        <div>
                            <h1 className="text-2xl font-bold text-gray-900">Retailer Dashboard</h1>
                            <p className="text-gray-600 mt-1">Welcome back, {user?.profile?.name || 'Retailer'}!</p>
                        </div>
                    </div>
                    <div className="flex items-center gap-3">
                        <Link href="/retailer/products/new">
                            <button className="flex items-center gap-2 px-4 py-2 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors duration-200">
                                <PlusIcon className="h-4 w-4" />
                                Add Product
                            </button>
                        </Link>
                    </div>
                </div>
            </div>

            {/* Content */}
            <div className="p-6 space-y-8">
                {/* Stats Grid */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                    <StatCard
                        title="Total Products"
                        value={dashboardData.stats.totalProducts}
                        icon={CubeIcon}
                        color="blue"
                    />
                    <StatCard
                        title="Active Products"
                        value={dashboardData.stats.activeProducts}
                        icon={EyeIcon}
                        color="green"
                    />
                    <StatCard
                        title="Draft Products"
                        value={dashboardData.stats.draftProducts}
                        icon={ClockIcon}
                        color="yellow"
                    />
                    <StatCard
                        title="Total Views"
                        value={dashboardData.stats.totalViews}
                        icon={ArrowTrendingUpIcon}
                        color="gray"
                    />
                </div>

                {/* Quick Actions */}
                <div className="bg-gray-50 rounded-xl p-6">
                    <h2 className="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <QuickAction
                            title="Add New Product"
                            description="Create and list a new product"
                            icon={PlusIcon}
                            href="/retailer/products/new"
                            color="blue"
                        />
                        <QuickAction
                            title="Manage Products"
                            description="Edit, update, or remove products"
                            icon={CubeIcon}
                            href="/retailer/products"
                            color="green"
                        />
                        <QuickAction
                            title="Store Settings"
                            description="Update your store information"
                            icon={BuildingStorefrontIcon}
                            href="/retailer/store"
                            color="yellow"
                        />
                    </div>
                </div>

                {/* Recent Activity */}
                <div className="bg-gray-50 rounded-xl p-6">
                    <h2 className="text-lg font-semibold text-gray-900 mb-4">Recent Activity</h2>
                    <RecentActivity activities={dashboardData.recentActivity} />
                </div>

                {/* Getting Started */}
                <div className="bg-blue-50 rounded-xl p-6">
                    <h2 className="text-lg font-semibold text-blue-900 mb-4">Getting Started</h2>
                    <div className="grid md:grid-cols-2 gap-4 text-sm">
                        <div>
                            <h3 className="font-medium text-blue-900 mb-2">Next Steps</h3>
                            <ul className="space-y-1 text-blue-800">
                                <li>• Set up your store profile</li>
                                <li>• Add your first product</li>
                                <li>• Configure store settings</li>
                                <li>• Review platform policies</li>
                            </ul>
                        </div>
                        <div>
                            <h3 className="font-medium text-blue-900 mb-2">Resources</h3>
                            <ul className="space-y-1 text-blue-800">
                                <li>• Seller help center</li>
                                <li>• Product listing guidelines</li>
                                <li>• Marketing best practices</li>
                                <li>• Contact support team</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}





















File: /app/retailer/products/new/page.js

'use client'

import { useState, useEffect, memo } from 'react'
import { useRouter } from 'next/navigation'
import { useUser } from '@/hooks/useUser'
import {
    CubeIcon,
    PhotoIcon,
    XMarkIcon,
    PlusIcon,
    ExclamationTriangleIcon,
    CheckCircleIcon,
    ArrowLeftIcon
} from '@heroicons/react/24/outline'
import LoadingSpinner from '@/components/ui/LoadingSpinner'
import Link from 'next/link'

const PRODUCT_CATEGORIES = [
    'Electronics',
    'Clothing',
    'Home & Garden',
    'Books',
    'Sports',
    'Beauty',
    'Food',
    'Other'
]

const PRODUCT_CONDITIONS = [
    'New',
    'Like New',
    'Good',
    'Fair'
]

const ImageUpload = memo(({ images, onImagesChange, maxImages = 5 }) => {
    const handleFileSelect = (e) => {
        const files = Array.from(e.target.files)
        if (images.length + files.length > maxImages) {
            alert(`Maximum ${maxImages} images allowed`)
            return
        }

        files.forEach(file => {
            if (file.type.startsWith('image/')) {
                const reader = new FileReader()
                reader.onload = (e) => {
                    const newImage = {
                        id: Date.now() + Math.random(),
                        file,
                        preview: e.target.result,
                        name: file.name
                    }
                    onImagesChange(prev => [...prev, newImage])
                }
                reader.readAsDataURL(file)
            }
        })
        e.target.value = ''
    }

    const removeImage = (imageId) => {
        onImagesChange(prev => prev.filter(img => img.id !== imageId))
    }

    return (
        <div className="space-y-4">
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
                {images.map((image) => (
                    <div key={image.id} className="relative group">
                        <img
                            src={image.preview}
                            alt={image.name}
                            className="w-full h-24 object-cover rounded-lg border border-gray-200"
                        />
                        <button
                            type="button"
                            onClick={() => removeImage(image.id)}
                            className="absolute -top-2 -right-2 p-1 bg-red-500 text-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-200"
                        >
                            <XMarkIcon className="h-4 w-4" />
                        </button>
                    </div>
                ))}

                {images.length < maxImages && (
                    <label className="w-full h-24 border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center cursor-pointer hover:border-gray-400 transition-colors duration-200">
                        <PhotoIcon className="h-6 w-6 text-gray-400" />
                        <span className="text-xs text-gray-500 mt-1">Add Image</span>
                        <input
                            type="file"
                            multiple
                            accept="image/*"
                            onChange={handleFileSelect}
                            className="hidden"
                        />
                    </label>
                )}
            </div>
            <p className="text-xs text-gray-500">
                {images.length}/{maxImages} images • Supported: JPG, PNG, GIF (Max 5MB each)
            </p>
        </div>
    )
})
ImageUpload.displayName = 'ImageUpload'

const FormField = memo(({ label, error, children, required = false, description = null }) => (
    <div className="space-y-2">
        <label className="block text-sm font-medium text-gray-700">
            {label}
            {required && <span className="text-red-500 ml-1">*</span>}
        </label>
        {description && (
            <p className="text-xs text-gray-500">{description}</p>
        )}
        {children}
        {error && (
            <p className="text-sm text-red-600 flex items-center">
                <ExclamationTriangleIcon className="h-4 w-4 mr-1 flex-shrink-0" />
                {error}
            </p>
        )}
    </div>
))
FormField.displayName = 'FormField'

const SuccessMessage = memo(({ show, message, onClose }) => {
    useEffect(() => {
        if (show) {
            const timer = setTimeout(onClose, 5000)
            return () => clearTimeout(timer)
        }
    }, [show, onClose])

    if (!show) return null

    return (
        <div className="bg-emerald-50 border border-emerald-200 rounded-xl p-4 mb-6">
            <div className="flex items-center gap-2">
                <CheckCircleIcon className="h-5 w-5 text-emerald-600" />
                <p className="text-emerald-700 font-medium">{message}</p>
            </div>
        </div>
    )
})
SuccessMessage.displayName = 'SuccessMessage'

export default function NewProductPage() {
    const { user, loading } = useUser()
    const router = useRouter()

    const [formData, setFormData] = useState({
        name: '',
        description: '',
        category: '',
        condition: 'New',
        price: '',
        compareAtPrice: '',
        sku: '',
        stock: '',
        weight: '',
        dimensions: {
            length: '',
            width: '',
            height: ''
        },
        tags: '',
        status: 'draft'
    })

    const [images, setImages] = useState([])
    const [errors, setErrors] = useState({})
    const [isSubmitting, setIsSubmitting] = useState(false)
    const [success, setSuccess] = useState({ show: false, message: '' })

    // Redirect if not retailer
    useEffect(() => {
        if (!loading && (!user || user.role !== 'Retailer')) {
            router.push('/account')
        }
    }, [user, loading, router])

    const validateForm = () => {
        const newErrors = {}

        if (!formData.name.trim()) {
            newErrors.name = 'Product name is required'
        } else if (formData.name.trim().length < 3) {
            newErrors.name = 'Product name must be at least 3 characters'
        }

        if (!formData.description.trim()) {
            newErrors.description = 'Product description is required'
        } else if (formData.description.trim().length < 20) {
            newErrors.description = 'Description must be at least 20 characters'
        }

        if (!formData.category) {
            newErrors.category = 'Please select a category'
        }

        if (!formData.price) {
            newErrors.price = 'Price is required'
        } else if (isNaN(formData.price) || parseFloat(formData.price) <= 0) {
            newErrors.price = 'Please enter a valid price'
        }

        if (formData.compareAtPrice && (isNaN(formData.compareAtPrice) || parseFloat(formData.compareAtPrice) <= parseFloat(formData.price))) {
            newErrors.compareAtPrice = 'Compare price must be higher than selling price'
        }

        if (!formData.stock) {
            newErrors.stock = 'Stock quantity is required'
        } else if (isNaN(formData.stock) || parseInt(formData.stock) < 0) {
            newErrors.stock = 'Please enter a valid stock quantity'
        }

        if (images.length === 0) {
            newErrors.images = 'At least one product image is required'
        }

        setErrors(newErrors)
        return Object.keys(newErrors).length === 0
    }

    const handleInputChange = (e) => {
        const { name, value } = e.target

        if (name.includes('.')) {
            const [parent, child] = name.split('.')
            setFormData(prev => ({
                ...prev,
                [parent]: {
                    ...prev[parent],
                    [child]: value
                }
            }))
        } else {
            setFormData(prev => ({
                ...prev,
                [name]: value
            }))
        }

        // Clear error when user starts typing
        if (errors[name]) {
            setErrors(prev => ({
                ...prev,
                [name]: ''
            }))
        }
    }

    const handleSubmit = async (e) => {
        e.preventDefault()

        if (!validateForm()) return

        setIsSubmitting(true)
        setErrors({})

        try {
            // TODO: Replace with actual API call when backend is ready
            // Simulate API call
            await new Promise(resolve => setTimeout(resolve, 2000))

            // Mock success response
            console.log('Product data to be submitted:', {
                ...formData,
                images: images.map(img => ({ name: img.name, file: img.file }))
            })

            setSuccess({ show: true, message: 'Product created successfully!' })

            // Reset form after successful submission
            setTimeout(() => {
                router.push('/retailer/products')
            }, 2000)

        } catch (error) {
            setErrors({ submit: 'Failed to create product. Please try again.' })
        } finally {
            setIsSubmitting(false)
        }
    }

    const handleSaveAsDraft = async () => {
        setFormData(prev => ({ ...prev, status: 'draft' }))
        setTimeout(() => handleSubmit({ preventDefault: () => { } }), 100)
    }

    const handlePublish = async () => {
        setFormData(prev => ({ ...prev, status: 'active' }))
        setTimeout(() => handleSubmit({ preventDefault: () => { } }), 100)
    }

    if (loading) {
        return (
            <div className="h-full flex items-center justify-center">
                <LoadingSpinner size="lg" />
            </div>
        )
    }

    if (!user) {
        router.push('/login')
        return null
    }

    return (
        <div className="h-full w-full">
            {/* Header */}
            <div className="p-6 rounded-xl border-b border-gray-200 bg-white">
                <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                        <CubeIcon className="h-8 w-8 text-gray-600" />
                        <div>
                            <h1 className="text-2xl font-bold text-gray-900">Add New Product</h1>
                            <p className="text-gray-600 mt-1">Create a new product listing for your store</p>
                        </div>
                    </div>
                    <Link href="/retailer/products">
                        <button className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors duration-200">
                            <ArrowLeftIcon className="h-4 w-4" />
                            Back to Products
                        </button>
                    </Link>
                </div>
            </div>

            {/* Content */}
            <div className="p-6 space-y-8">
                <SuccessMessage
                    show={success.show}
                    message={success.message}
                    onClose={() => setSuccess({ show: false, message: '' })}
                />

                <form onSubmit={handleSubmit} className="space-y-8">
                    {/* Basic Information */}
                    <div className="bg-gray-50 rounded-xl p-6">
                        <h2 className="text-lg font-semibold text-gray-900 mb-6">Basic Information</h2>

                        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                            <div className="lg:col-span-2">
                                <FormField label="Product Name" error={errors.name} required>
                                    <input
                                        type="text"
                                        name="name"
                                        value={formData.name}
                                        onChange={handleInputChange}
                                        className={`w-full px-4 py-3 text-sm border-2 rounded-xl bg-white text-black placeholder:text-gray-500 focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200 ${errors.name ? 'border-red-300' : 'border-gray-300'
                                            }`}
                                        placeholder="Enter product name"
                                        maxLength={100}
                                    />
                                </FormField>
                            </div>

                            <FormField label="Category" error={errors.category} required>
                                <select
                                    name="category"
                                    value={formData.category}
                                    onChange={handleInputChange}
                                    className={`w-full px-4 py-3 text-sm border-2 rounded-xl bg-white text-black focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200 ${errors.category ? 'border-red-300' : 'border-gray-300'
                                        }`}
                                >
                                    <option value="">Select category</option>
                                    {PRODUCT_CATEGORIES.map(category => (
                                        <option key={category} value={category}>
                                            {category}
                                        </option>
                                    ))}
                                </select>
                            </FormField>

                            <FormField label="Condition" required>
                                <select
                                    name="condition"
                                    value={formData.condition}
                                    onChange={handleInputChange}
                                    className="w-full px-4 py-3 text-sm border-2 rounded-xl bg-white text-black focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200 border-gray-300"
                                >
                                    {PRODUCT_CONDITIONS.map(condition => (
                                        <option key={condition} value={condition}>
                                            {condition}
                                        </option>
                                    ))}
                                </select>
                            </FormField>

                            <div className="lg:col-span-2">
                                <FormField label="Description" error={errors.description} required>
                                    <textarea
                                        name="description"
                                        value={formData.description}
                                        onChange={handleInputChange}
                                        rows={4}
                                        className={`w-full px-4 py-3 text-sm border-2 rounded-xl bg-white text-black placeholder:text-gray-500 focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200 resize-none ${errors.description ? 'border-red-300' : 'border-gray-300'
                                            }`}
                                        placeholder="Describe your product in detail..."
                                        maxLength={1000}
                                    />
                                    <div className="text-xs text-gray-500 mt-1">
                                        {formData.description.length}/1000 characters
                                    </div>
                                </FormField>
                            </div>
                        </div>
                    </div>

                    {/* Product Images */}
                    <div className="bg-gray-50 rounded-xl p-6">
                        <h2 className="text-lg font-semibold text-gray-900 mb-6">Product Images</h2>
                        <FormField error={errors.images}>
                            <ImageUpload images={images} onImagesChange={setImages} />
                        </FormField>
                    </div>

                    {/* Pricing & Inventory */}
                    <div className="bg-gray-50 rounded-xl p-6">
                        <h2 className="text-lg font-semibold text-gray-900 mb-6">Pricing & Inventory</h2>

                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                            <FormField label="Price (₹)" error={errors.price} required>
                                <input
                                    type="number"
                                    name="price"
                                    value={formData.price}
                                    onChange={handleInputChange}
                                    step="0.01"
                                    min="0"
                                    className={`w-full px-4 py-3 text-sm border-2 rounded-xl bg-white text-black placeholder:text-gray-500 focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200 ${errors.price ? 'border-red-300' : 'border-gray-300'
                                        }`}
                                    placeholder="0.00"
                                />
                            </FormField>

                            <FormField
                                label="Compare at Price (₹)"
                                error={errors.compareAtPrice}
                                description="Original price before discount"
                            >
                                <input
                                    type="number"
                                    name="compareAtPrice"
                                    value={formData.compareAtPrice}
                                    onChange={handleInputChange}
                                    step="0.01"
                                    min="0"
                                    className={`w-full px-4 py-3 text-sm border-2 rounded-xl bg-white text-black placeholder:text-gray-500 focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200 ${errors.compareAtPrice ? 'border-red-300' : 'border-gray-300'
                                        }`}
                                    placeholder="0.00"
                                />
                            </FormField>

                            <FormField label="Stock Quantity" error={errors.stock} required>
                                <input
                                    type="number"
                                    name="stock"
                                    value={formData.stock}
                                    onChange={handleInputChange}
                                    min="0"
                                    className={`w-full px-4 py-3 text-sm border-2 rounded-xl bg-white text-black placeholder:text-gray-500 focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200 ${errors.stock ? 'border-red-300' : 'border-gray-300'
                                        }`}
                                    placeholder="0"
                                />
                            </FormField>

                            <FormField label="SKU" description="Stock Keeping Unit (optional)">
                                <input
                                    type="text"
                                    name="sku"
                                    value={formData.sku}
                                    onChange={handleInputChange}
                                    className="w-full px-4 py-3 text-sm border-2 rounded-xl bg-white text-black placeholder:text-gray-500 focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200 border-gray-300"
                                    placeholder="Enter SKU"
                                />
                            </FormField>

                            <FormField label="Weight (kg)" description="Shipping weight">
                                <input
                                    type="number"
                                    name="weight"
                                    value={formData.weight}
                                    onChange={handleInputChange}
                                    step="0.01"
                                    min="0"
                                    className="w-full px-4 py-3 text-sm border-2 rounded-xl bg-white text-black placeholder:text-gray-500 focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200 border-gray-300"
                                    placeholder="0.00"
                                />
                            </FormField>

                            <FormField label="Tags" description="Comma-separated keywords">
                                <input
                                    type="text"
                                    name="tags"
                                    value={formData.tags}
                                    onChange={handleInputChange}
                                    className="w-full px-4 py-3 text-sm border-2 rounded-xl bg-white text-black placeholder:text-gray-500 focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200 border-gray-300"
                                    placeholder="tag1, tag2, tag3"
                                />
                            </FormField>
                        </div>
                    </div>

                    {/* Dimensions (Optional) */}
                    <div className="bg-gray-50 rounded-xl p-6">
                        <h2 className="text-lg font-semibold text-gray-900 mb-6">Dimensions (Optional)</h2>

                        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                            <FormField label="Length (cm)">
                                <input
                                    type="number"
                                    name="dimensions.length"
                                    value={formData.dimensions.length}
                                    onChange={handleInputChange}
                                    step="0.1"
                                    min="0"
                                    className="w-full px-4 py-3 text-sm border-2 rounded-xl bg-white text-black placeholder:text-gray-500 focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200 border-gray-300"
                                    placeholder="0.0"
                                />
                            </FormField>

                            <FormField label="Width (cm)">
                                <input
                                    type="number"
                                    name="dimensions.width"
                                    value={formData.dimensions.width}
                                    onChange={handleInputChange}
                                    step="0.1"
                                    min="0"
                                    className="w-full px-4 py-3 text-sm border-2 rounded-xl bg-white text-black placeholder:text-gray-500 focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200 border-gray-300"
                                    placeholder="0.0"
                                />
                            </FormField>

                            <FormField label="Height (cm)">
                                <input
                                    type="number"
                                    name="dimensions.height"
                                    value={formData.dimensions.height}
                                    onChange={handleInputChange}
                                    step="0.1"
                                    min="0"
                                    className="w-full px-4 py-3 text-sm border-2 rounded-xl bg-white text-black placeholder:text-gray-500 focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200 border-gray-300"
                                    placeholder="0.0"
                                />
                            </FormField>
                        </div>
                    </div>

                    {/* Submit Error */}
                    {errors.submit && (
                        <div className="bg-red-50 border border-red-200 rounded-xl p-3">
                            <div className="flex items-center gap-2">
                                <ExclamationTriangleIcon className="h-4 w-4 text-red-600" />
                                <p className="text-red-700 text-sm">{errors.submit}</p>
                            </div>
                        </div>
                    )}

                    {/* Action Buttons */}
                    <div className="flex items-center justify-between">
                        <Link href="/retailer/products">
                            <button
                                type="button"
                                className="px-6 py-3 text-sm font-medium text-gray-700 bg-gray-100 rounded-xl hover:bg-gray-200 transition-colors duration-200"
                            >
                                Cancel
                            </button>
                        </Link>

                        <div className="flex items-center gap-3">
                            <button
                                type="button"
                                onClick={handleSaveAsDraft}
                                disabled={isSubmitting}
                                className="px-6 py-3 text-sm font-medium text-gray-700 bg-white border-2 border-gray-300 rounded-xl hover:bg-gray-50 disabled:opacity-50 transition-colors duration-200"
                            >
                                {isSubmitting && formData.status === 'draft' ? (
                                    <>
                                        <LoadingSpinner size="sm" className="border-gray-600 mr-2" />
                                        Saving Draft...
                                    </>
                                ) : (
                                    'Save as Draft'
                                )}
                            </button>

                            <button
                                type="button"
                                onClick={handlePublish}
                                disabled={isSubmitting}
                                className="px-6 py-3 text-sm font-medium text-white bg-black rounded-xl hover:bg-gray-800 disabled:opacity-50 transition-colors duration-200 flex items-center gap-2"
                            >
                                {isSubmitting && formData.status === 'active' ? (
                                    <>
                                        <LoadingSpinner size="sm" className="border-white" />
                                        Publishing...
                                    </>
                                ) : (
                                    <>
                                        <PlusIcon className="h-4 w-4" />
                                        Publish Product
                                    </>
                                )}
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    )
}





















File: /app/retailer/products/page.js

'use client'

import { useState, useEffect, memo } from 'react'
import { useRouter } from 'next/navigation'
import { useUser } from '@/hooks/useUser'
import {
    CubeIcon,
    PlusIcon,
    PencilSquareIcon,
    TrashIcon,
    EyeIcon,
    EyeSlashIcon,
    MagnifyingGlassIcon,
    FunnelIcon,
    PhotoIcon
} from '@heroicons/react/24/outline'
import LoadingSpinner from '@/components/ui/LoadingSpinner'
import Link from 'next/link'

const ProductCard = memo(({ product, onStatusToggle, onDelete, isUpdating }) => {
    const [showDeleteConfirm, setShowDeleteConfirm] = useState(false)

    const statusConfig = {
        active: { color: 'text-green-600', bg: 'bg-green-50', label: 'Active' },
        draft: { color: 'text-yellow-600', bg: 'bg-yellow-50', label: 'Draft' },
        inactive: { color: 'text-gray-600', bg: 'bg-gray-50', label: 'Inactive' }
    }

    const config = statusConfig[product.status] || statusConfig.draft

    return (
        <>
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow duration-200">
                <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-3">
                        {product.images && product.images.length > 0 ? (
                            <img
                                src={product.images[0]}
                                alt={product.name}
                                className="w-16 h-16 object-cover rounded-lg border border-gray-200"
                            />
                        ) : (
                            <div className="w-16 h-16 bg-gray-100 rounded-lg flex items-center justify-center">
                                <PhotoIcon className="h-8 w-8 text-gray-400" />
                            </div>
                        )}
                        <div className="flex-1">
                            <h3 className="font-semibold text-gray-900 mb-1">{product.name}</h3>
                            <p className="text-sm text-gray-500">{product.category}</p>
                            <div className="flex items-center gap-2 mt-1">
                                <span className={`text-xs px-2 py-1 rounded-full font-medium ${config.bg} ${config.color}`}>
                                    {config.label}
                                </span>
                                <span className="text-xs text-gray-500">
                                    Stock: {product.stock}
                                </span>
                            </div>
                        </div>
                    </div>
                    <div className="text-right">
                        <p className="text-lg font-bold text-gray-900">₹{product.price}</p>
                        {product.compareAtPrice && (
                            <p className="text-sm text-gray-500 line-through">₹{product.compareAtPrice}</p>
                        )}
                    </div>
                </div>

                <div className="flex items-center justify-between pt-4 border-t border-gray-200">
                    <div className="flex items-center gap-2 text-sm text-gray-500">
                        <EyeIcon className="h-4 w-4" />
                        {product.views || 0} views
                    </div>
                    <div className="flex items-center gap-2">
                        <button
                            onClick={() => onStatusToggle(product.id, product.status === 'active' ? 'inactive' : 'active')}
                            disabled={isUpdating}
                            className={`p-2 rounded-lg transition-colors duration-200 ${product.status === 'active'
                                    ? 'text-green-600 hover:bg-green-50'
                                    : 'text-gray-600 hover:bg-gray-50'
                                }`}
                            title={product.status === 'active' ? 'Deactivate' : 'Activate'}
                        >
                            {product.status === 'active' ? (
                                <EyeIcon className="h-4 w-4" />
                            ) : (
                                <EyeSlashIcon className="h-4 w-4" />
                            )}
                        </button>
                        <Link href={`/retailer/products/${product.id}/edit`}>
                            <button className="p-2 rounded-lg text-blue-600 hover:bg-blue-50 transition-colors duration-200">
                                <PencilSquareIcon className="h-4 w-4" />
                            </button>
                        </Link>
                        <button
                            onClick={() => setShowDeleteConfirm(true)}
                            className="p-2 rounded-lg text-red-600 hover:bg-red-50 transition-colors duration-200"
                        >
                            <TrashIcon className="h-4 w-4" />
                        </button>
                    </div>
                </div>
            </div>

            {/* Delete Confirmation Modal */}
            {showDeleteConfirm && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                    <div className="bg-white rounded-xl max-w-md w-full p-6">
                        <div className="flex items-center gap-3 mb-4">
                            <TrashIcon className="h-6 w-6 text-red-600" />
                            <h3 className="text-lg font-semibold text-gray-900">Delete Product</h3>
                        </div>
                        <p className="text-gray-600 mb-6">
                            Are you sure you want to delete "{product.name}"? This action cannot be undone.
                        </p>
                        <div className="flex items-center gap-3">
                            <button
                                onClick={() => setShowDeleteConfirm(false)}
                                className="flex-1 px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors duration-200"
                            >
                                Cancel
                            </button>
                            <button
                                onClick={() => {
                                    onDelete(product.id)
                                    setShowDeleteConfirm(false)
                                }}
                                disabled={isUpdating}
                                className="flex-1 px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-lg hover:bg-red-700 disabled:opacity-50 transition-colors duration-200"
                            >
                                {isUpdating ? 'Deleting...' : 'Delete'}
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </>
    )
})
ProductCard.displayName = 'ProductCard'

const FilterControls = memo(({ filters, onFilterChange, onSearch, searchTerm, onSearchChange }) => {
    return (
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 mb-6">
            <div className="flex flex-col md:flex-row gap-4">
                {/* Search */}
                <div className="flex-1">
                    <div className="relative">
                        <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                        <input
                            type="text"
                            value={searchTerm}
                            onChange={(e) => onSearchChange(e.target.value)}
                            onKeyPress={(e) => e.key === 'Enter' && onSearch()}
                            placeholder="Search products..."
                            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200"
                        />
                    </div>
                </div>

                {/* Status Filter */}
                <div className="flex items-center gap-2">
                    <FunnelIcon className="h-4 w-4 text-gray-500" />
                    <select
                        value={filters.status}
                        onChange={(e) => onFilterChange('status', e.target.value)}
                        className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200"
                    >
                        <option value="all">All Status</option>
                        <option value="active">Active</option>
                        <option value="draft">Draft</option>
                        <option value="inactive">Inactive</option>
                    </select>
                </div>

                {/* Category Filter */}
                <select
                    value={filters.category}
                    onChange={(e) => onFilterChange('category', e.target.value)}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-black focus:outline-none transition-all duration-200"
                >
                    <option value="all">All Categories</option>
                    <option value="Electronics">Electronics</option>
                    <option value="Clothing">Clothing</option>
                    <option value="Home & Garden">Home & Garden</option>
                    <option value="Books">Books</option>
                    <option value="Sports">Sports</option>
                    <option value="Beauty">Beauty</option>
                    <option value="Food">Food</option>
                    <option value="Other">Other</option>
                </select>
            </div>
        </div>
    )
})
FilterControls.displayName = 'FilterControls'

export default function ProductsPage() {
    const { user, loading } = useUser()
    const router = useRouter()

    const [products, setProducts] = useState([])
    const [filteredProducts, setFilteredProducts] = useState([])
    const [loadingProducts, setLoadingProducts] = useState(true)
    const [updatingId, setUpdatingId] = useState(null)
    const [searchTerm, setSearchTerm] = useState('')
    const [filters, setFilters] = useState({
        status: 'all',
        category: 'all'
    })

    // Redirect if not retailer
    useEffect(() => {
        if (!loading && (!user || user.role !== 'Retailer')) {
            router.push('/account')
        }
    }, [user, loading, router])

    // Fetch products (mock data for now)
    useEffect(() => {
        const fetchProducts = async () => {
            try {
                // TODO: Replace with actual API call
                // Simulate API call with mock data
                setTimeout(() => {
                    const mockProducts = [
                        {
                            id: 1,
                            name: 'Wireless Bluetooth Headphones',
                            description: 'High-quality wireless headphones with noise cancellation',
                            category: 'Electronics',
                            price: 2999,
                            compareAtPrice: 3999,
                            stock: 25,
                            status: 'active',
                            images: ['/api/placeholder/400/300'],
                            views: 156,
                            createdAt: '2024-01-15'
                        },
                        {
                            id: 2,
                            name: 'Cotton T-Shirt',
                            description: 'Comfortable cotton t-shirt in multiple colors',
                            category: 'Clothing',
                            price: 599,
                            compareAtPrice: null,
                            stock: 0,
                            status: 'inactive',
                            images: [],
                            views: 89,
                            createdAt: '2024-01-10'
                        },
                        {
                            id: 3,
                            name: 'Smart Watch',
                            description: 'Feature-rich smartwatch with health monitoring',
                            category: 'Electronics',
                            price: 8999,
                            compareAtPrice: 12999,
                            stock: 12,
                            status: 'draft',
                            images: ['/api/placeholder/400/300'],
                            views: 0,
                            createdAt: '2024-01-20'
                        }
                    ]
                    setProducts(mockProducts)
                    setFilteredProducts(mockProducts)
                    setLoadingProducts(false)
                }, 1000)
            } catch (error) {
                console.error('Error fetching products:', error)
                setLoadingProducts(false)
            }
        }

        if (user && user.role === 'Retailer') {
            fetchProducts()
        }
    }, [user])

    // Filter products
    useEffect(() => {
        let filtered = products

        // Apply search filter
        if (searchTerm) {
            filtered = filtered.filter(product =>
                product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                product.category.toLowerCase().includes(searchTerm.toLowerCase())
            )
        }

        // Apply status filter
        if (filters.status !== 'all') {
            filtered = filtered.filter(product => product.status === filters.status)
        }

        // Apply category filter
        if (filters.category !== 'all') {
            filtered = filtered.filter(product => product.category === filters.category)
        }

        setFilteredProducts(filtered)
    }, [products, searchTerm, filters])

    const handleFilterChange = (filterType, value) => {
        setFilters(prev => ({
            ...prev,
            [filterType]: value
        }))
    }

    const handleSearch = () => {
        // Search is handled by useEffect, this is just for Enter key support
    }

    const handleStatusToggle = async (productId, newStatus) => {
        setUpdatingId(productId)
        try {
            // TODO: Replace with actual API call
            setTimeout(() => {
                setProducts(prev => prev.map(product =>
                    product.id === productId ? { ...product, status: newStatus } : product
                ))
                setUpdatingId(null)
            }, 1000)
        } catch (error) {
            console.error('Error updating product status:', error)
            setUpdatingId(null)
        }
    }

    const handleDelete = async (productId) => {
        setUpdatingId(productId)
        try {
            // TODO: Replace with actual API call
            setTimeout(() => {
                setProducts(prev => prev.filter(product => product.id !== productId))
                setUpdatingId(null)
            }, 1000)
        } catch (error) {
            console.error('Error deleting product:', error)
            setUpdatingId(null)
        }
    }

    if (loading || loadingProducts) {
        return (
            <div className="h-full flex items-center justify-center">
                <LoadingSpinner size="lg" />
            </div>
        )
    }

    return (
        <div className="h-full w-full">
            {/* Header */}
            <div className="p-6 rounded-xl border-b border-gray-200 bg-white">
                <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                        <CubeIcon className="h-8 w-8 text-gray-600" />
                        <div>
                            <h1 className="text-2xl font-bold text-gray-900">Product Management</h1>
                            <p className="text-gray-600 mt-1">Manage your product listings and inventory</p>
                        </div>
                    </div>
                    <Link href="/retailer/products/new">
                        <button className="flex items-center gap-2 px-4 py-2 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors duration-200">
                            <PlusIcon className="h-4 w-4" />
                            Add Product
                        </button>
                    </Link>
                </div>
            </div>

            {/* Content */}
            <div className="p-6">
                {/* Filters */}
                <FilterControls
                    filters={filters}
                    onFilterChange={handleFilterChange}
                    onSearch={handleSearch}
                    searchTerm={searchTerm}
                    onSearchChange={setSearchTerm}
                />

                {/* Products Grid */}
                {filteredProducts.length === 0 ? (
                    <div className="text-center py-12">
                        <CubeIcon className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                        <h3 className="text-lg font-medium text-gray-900 mb-2">
                            {products.length === 0 ? 'No Products Yet' : 'No Products Found'}
                        </h3>
                        <p className="text-gray-600 mb-4">
                            {products.length === 0
                                ? 'Start by adding your first product to your store'
                                : 'Try adjusting your search or filters'
                            }
                        </p>
                        {products.length === 0 && (
                            <Link href="/retailer/products/new">
                                <button className="inline-flex items-center gap-2 px-4 py-2 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors duration-200">
                                    <PlusIcon className="h-4 w-4" />
                                    Add Your First Product
                                </button>
                            </Link>
                        )}
                    </div>
                ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {filteredProducts.map(product => (
                            <ProductCard
                                key={product.id}
                                product={product}
                                onStatusToggle={handleStatusToggle}
                                onDelete={handleDelete}
                                isUpdating={updatingId === product.id}
                            />
                        ))}
                    </div>
                )}
            </div>
        </div>
    )
}





















